digraph G {
    "analyze_historical_data_quality.py" -> "pathlib";
    "analyze_historical_data_quality.py" -> "typing";
    "api_key_report.py" -> "datetime";
    "api_key_test.py" -> "datetime";
    "api_key_test_updated.py" -> "datetime";
    "benchmark_retrodiction.py" -> "typing";
    "benchmark_retrodiction.py" -> "datetime";
    "benchmark_retrodiction.py" -> "unittest.mock";
    "benchmark_retrodiction.py" -> "recursive_training.parallel_trainer";
    "benchmark_retrodiction.py" -> "recursive_training.data.data_store";
    "benchmark_retrodiction.py" -> "recursive_training.metrics.metrics_store";
    "benchmark_retrodiction.py" -> "recursive_training.advanced_metrics.retrodiction_curriculum";
    "benchmark_retrodiction.py" -> "core.optimized_trust_tracker";
    "benchmark_retrodiction.py" -> "causal_model.optimized_discovery";
    "enhanced_phantom_scanner.py" -> "typing";
    "enhanced_phantom_scanner.py" -> "collections";
    "git_cleanup.py" -> "pathlib";
    "improve_historical_data.py" -> "pathlib";
    "improve_historical_data.py" -> "typing";
    "improve_historical_data.py" -> "datetime";
    "improve_historical_data.py" -> "iris.iris_plugins_variable_ingestion.historical_ingestion_plugin";
    "runversionone.py" -> "datetime";
    "runversionone.py" -> "typing";
    "runversionone.py" -> "simulation_engine.simulator_core";
    "runversionone.py" -> "simulation_engine.worldstate";
    "runversionone.py" -> "recursive_training.data.data_store";
    "runversionone.py" -> "recursive_training.advanced_metrics.enhanced_metrics";
    "runversionone.py" -> "learning.learning";
    "runversionone.py" -> "recursive_training.parallel_trainer";
    "runversionone.py" -> "core.optimized_trust_tracker";
    "runversionone.py" -> "datetime";
    "core_adapter.py" -> "interfaces.core_interface";
    "core_adapter.py" -> "core.pulse_config";
    "simulation_adapter.py" -> "interfaces.simulation_interface";
    "simulation_adapter.py" -> "simulation_engine";
    "symbolic_adapter.py" -> "interfaces.symbolic_interface";
    "symbolic_adapter.py" -> "symbolic_system";
    "trust_adapter.py" -> "interfaces.trust_interface";
    "trust_adapter.py" -> "trust_system.trust_engine";
    "core_api.py" -> "flask";
    "core_api.py" -> "datetime";
    "core_api.py" -> "forecast_engine.forecast_memory";
    "core_api.py" -> "simulation_engine.simulate_backward";
    "core_api.py" -> "core.variable_registry";
    "core_api.py" -> "core.feature_store";
    "core_api.py" -> "time";
    "core_api.py" -> "uuid";
    "core_api.py" -> "threading";
    "core_api.py" -> "datetime";
    "core_api.py" -> "core.training_review_store";
    "core_api.py" -> "datetime";
    "core_api.py" -> "core.training_review_store";
    "server.py" -> "flask";
    "server.py" -> "typing";
    "server.py" -> "learning.forecast_pipeline_runner";
    "server.py" -> "learning.recursion_audit";
    "server.py" -> "dev_tools.pulse_ui_plot";
    "server.py" -> "operator_interface.learning_log_viewer";
    "server.py" -> "memory.variable_cluster_engine";
    "capital_digest_formatter.py" -> "typing";
    "capital_digest_formatter.py" -> "typing";
    "capital_layer.py" -> "typing";
    "capital_layer.py" -> "simulation_engine.worldstate";
    "capital_layer.py" -> "simulation_engine.state_mutation";
    "capital_layer.py" -> "core.variable_accessor";
    "capital_layer.py" -> "symbolic_system.symbolic_utils";
    "capital_layer.py" -> "pulse.config.loader";
    "capital_layer_cli.py" -> "capital_engine.capital_layer";
    "capital_layer_cli.py" -> "simulation_engine.worldstate";
    "counterfactual_engine.py" -> "typing";
    "counterfactual_engine.py" -> "concurrent.futures";
    "counterfactual_engine.py" -> "causal_model.structural_causal_model";
    "counterfactual_simulator.py" -> "typing";
    "counterfactual_simulator.py" -> "datetime";
    "counterfactual_simulator.py" -> "functools";
    "counterfactual_simulator.py" -> "causal_model.counterfactual_engine";
    "counterfactual_simulator.py" -> "causal_model.structural_causal_model";
    "discovery.py" -> "typing";
    "discovery.py" -> "causal_model.structural_causal_model";
    "discovery.py" -> "causal_model.optimized_discovery";
    "discovery.py" -> "causal_model.vectorized_operations";
    "optimized_discovery.py" -> "typing";
    "optimized_discovery.py" -> "concurrent.futures";
    "optimized_discovery.py" -> "functools";
    "optimized_discovery.py" -> "causal_model.structural_causal_model";
    "optimized_discovery.py" -> "scipy.stats";
    "structural_causal_model.py" -> "typing";
    "vectorized_operations.py" -> "typing";
    "vectorized_operations.py" -> "scipy";
    "conversational_core.py" -> "copy";
    "conversational_core.py" -> "typing";
    "conversational_core.py" -> "datetime";
    "conversational_core.py" -> "datetime";
    "conversational_core.py" -> "chatmode.vector_store.codebase_vector_store";
    "conversational_core.py" -> "chatmode.vector_store.build_vector_store";
    "conversational_core.py" -> "chatmode.llm_integration.llm_model";
    "conversational_core.py" -> "chatmode.llm_integration.domain_adapter";
    "conversational_core.py" -> "chatmode.rag.context_provider";
    "conversational_core.py" -> "chatmode.config.llm_config";
    "conversational_core.py" -> "chatmode.integrations";
    "launch_conversational_ui.py" -> "chatmode.ui.conversational_gui";
    "launch_conversational_ui.py" -> "chatmode.conversational_core";
    "test_openai_integration.py" -> "chatmode.llm_integration.llm_model";
    "test_openai_integration.py" -> "chatmode.llm_integration.openai_config";
    "llm_config.py" -> "typing";
    "pulse_module_adapters.py" -> "typing";
    "pulse_module_adapters.py" -> "datetime";
    "pulse_module_adapters.py" -> "pathlib";
    "pulse_module_adapters.py" -> "simulation_engine.worldstate";
    "pulse_module_adapters.py" -> "simulation_engine.simulator_core";
    "pulse_module_adapters.py" -> "forecast_engine.forecast_ensemble";
    "pulse_module_adapters.py" -> "trust_system.trust_engine";
    "pulse_module_adapters.py" -> "memory.trace_memory";
    "pulse_module_adapters.py" -> "symbolic_system.symbolic_state_tagger";
    "pulse_module_adapters.py" -> "iris.iris_utils.historical_data_retriever";
    "pulse_module_adapters.py" -> "iris.iris_plugins_finance";
    "pulse_module_adapters.py" -> "datetime";
    "pulse_module_adapters.py" -> "recursive_training.parallel_trainer";
    "pulse_module_adapters.py" -> "recursive_training.integration";
    "pulse_module_adapters.py" -> "recursive_training.integration";
    "pulse_module_adapters.py" -> "recursive_training.integration";
    "pulse_module_adapters.py" -> "recursive_training.integration";
    "pulse_module_adapters.py" -> "recursive_training.integration";
    "pulse_module_adapters.py" -> "recursive_training.metrics.metrics_store";
    "domain_adapter.py" -> "typing";
    "domain_adapter.py" -> "peft";
    "llm_model.py" -> "typing";
    "llm_model.py" -> "enum";
    "llm_model.py" -> "chatmode.llm_integration.openai_config";
    "llm_model.py" -> "openai";
    "openai_config.py" -> "typing";
    "openai_config.py" -> "chatmode.config.llm_config";
    "context_provider.py" -> "typing";
    "context_provider.py" -> "chatmode.vector_store.codebase_vector_store";
    "context_provider.py" -> "chatmode.vector_store.build_vector_store";
    "__init__.py" -> "chatmode.rag.context_provider";
    "conversational_gui.py" -> "tkinter";
    "conversational_gui.py" -> "chatmode.conversational_core";
    "conversational_gui.py" -> "chatmode.llm_integration.llm_model";
    "build_vector_store.py" -> "tqdm";
    "build_vector_store.py" -> "chatmode.vector_store.codebase_vector_store";
    "build_vector_store.py" -> "chatmode.vector_store.codebase_parser";
    "codebase_parser.py" -> "chatmode.vector_store.build_vector_store";
    "codebase_vector_store.py" -> "sentence_transformers";
    "gui_launcher.py" -> "tkinter";
    "interactive_shell.py" -> "datetime";
    "interactive_shell.py" -> "typing";
    "interactive_shell.py" -> "utils.log_utils";
    "interactive_shell.py" -> "core.path_registry";
    "interactive_shell.py" -> "core.pulse_config";
    "interactive_shell.py" -> "core.pulse_config";
    "interactive_shell.py" -> "memory.pulse_memory_audit_report";
    "interactive_shell.py" -> "memory.forecast_memory";
    "interactive_shell.py" -> "trust_system.trust_engine";
    "interactive_shell.py" -> "simulation_engine.utils.simulation_trace_viewer";
    "main.py" -> "datetime";
    "main.py" -> "utils.log_utils";
    "main.py" -> "core.pulse_config";
    "main.py" -> "forecast_output.digest_logger";
    "main.py" -> "operator_interface.strategos_digest";
    "main.py" -> "memory.forecast_memory";
    "main.py" -> "simulation_engine.worldstate";
    "main.py" -> "simulation_engine.turn_engine";
    "main.py" -> "simulation_engine.causal_rules";
    "main.py" -> "forecast_output.forecast_generator";
    "main.py" -> "forecast_output.pfpa_logger";
    "main.py" -> "forecast_output.digest_exporter";
    "main.py" -> "forecast_output.strategos_digest_builder";
    "main.py" -> "operator_interface.pulse_prompt_logger";
    "main.py" -> "forecast_engine.forecast_regret_engine";
    "main.py" -> "core.pulse_learning_log";
    "main.py" -> "pipeline.ingestion_service";
    "main.py" -> "core.variable_registry";
    "main.py" -> "core.variable_accessor";
    "main.py" -> "iris.iris_utils.historical_data_repair";
    "main.py" -> "trust_system.retrodiction_engine";
    "main.py" -> "learning.trust_audit";
    "ai_config.py" -> "pulse.config.loader";
    "bayesian_trust_tracker.py" -> "collections";
    "bayesian_trust_tracker.py" -> "typing";
    "celery_app.py" -> "celery";
    "celery_app.py" -> "core.pulse_config";
    "celery_app.py" -> "core.metrics";
    "celery_app.py" -> "iris.iris_scraper";
    "celery_app.py" -> "datetime";
    "celery_app.py" -> "datetime";
    "celery_app.py" -> "core.feature_store";
    "celery_app.py" -> "forecast_engine.ai_forecaster";
    "celery_app.py" -> "trust_system.trust_engine";
    "event_bus.py" -> "collections";
    "event_bus.py" -> "typing";
    "feature_store.py" -> "typing";
    "feature_store.py" -> "core.pulse_config";
    "metrics.py" -> "prometheus_client";
    "optimized_trust_tracker.py" -> "collections";
    "optimized_trust_tracker.py" -> "typing";
    "optimized_trust_tracker.py" -> "functools";
    "path_registry.py" -> "pathlib";
    "path_registry.py" -> "typing";
    "pulse_config.py" -> "typing";
    "pulse_config.py" -> "core.path_registry";
    "pulse_learning_log.py" -> "typing";
    "pulse_learning_log.py" -> "datetime";
    "pulse_learning_log.py" -> "contextlib";
    "pulse_learning_log.py" -> "core.path_registry";
    "pulse_learning_log.py" -> "core.bayesian_trust_tracker";
    "schemas.py" -> "pydantic";
    "schemas.py" -> "typing";
    "schemas.py" -> "datetime";
    "service_registry.py" -> "interfaces.simulation_interface";
    "service_registry.py" -> "interfaces.trust_interface";
    "service_registry.py" -> "interfaces.symbolic_interface";
    "service_registry.py" -> "interfaces.core_interface";
    "training_review_store.py" -> "datetime";
    "training_review_store.py" -> "pathlib";
    "trust_update_buffer.py" -> "typing";
    "trust_update_buffer.py" -> "collections";
    "trust_update_buffer.py" -> "core.optimized_trust_tracker";
    "variable_accessor.py" -> "typing";
    "variable_accessor.py" -> "core.variable_registry";
    "variable_registry.py" -> "__future__";
    "variable_registry.py" -> "typing";
    "variable_registry.py" -> "core.path_registry";
    "variable_registry.py" -> "contextlib";
    "retrodiction_dag.py" -> "airflow";
    "retrodiction_dag.py" -> "airflow.operators.python";
    "retrodiction_dag.py" -> "datetime";
    "retrodiction_dag.py" -> "simulation_engine.historical_retrodiction_runner";
    "manual_ingestion.py" -> "pathlib";
    "manual_ingestion.py" -> "recursive_training.data.streaming_data_store";
    "apply_symbolic_revisions.py" -> "typing";
    "apply_symbolic_revisions.py" -> "forecast_output.symbolic_tuning_engine";
    "apply_symbolic_upgrades.py" -> "symbolic_system.symbolic_executor";
    "certify_forecast_batch.py" -> "forecast_output.forecast_fidelity_certifier";
    "cli_retrodict_forecasts.py" -> "learning.learning";
    "cli_trace_audit.py" -> "memory.trace_audit_engine";
    "compress_forecast_chain.py" -> "forecast_output.mutation_compression_engine";
    "compress_forecast_chain.py" -> "memory.forecast_episode_tracer";
    "enforce_forecast_batch.py" -> "trust_system.license_enforcer";
    "episode_memory_viewer.py" -> "trust_system.forecast_episode_logger";
    "epistemic_mirror_review.py" -> "collections";
    "generate_plugin_stubs.py" -> "iris.iris_scraper";
    "generate_symbolic_upgrade_plan.py" -> "symbolic_system.symbolic_upgrade_planner";
    "generate_symbolic_upgrade_plan.py" -> "symbolic_system.pulse_symbolic_learning_loop";
    "hook_utils.py" -> "typing";
    "log_forecast_audits.py" -> "trust_system.forecast_audit_trail";
    "memory_recovery_viewer.py" -> "typing";
    "module_dependency_map.py" -> "typing";
    "operator_brief_cli.py" -> "operator_interface.operator_brief_generator";
    "operator_brief_cli.py" -> "trust_system.license_explainer";
    "propose_epistemic_upgrades.py" -> "collections";
    "pulse_arc_cli.py" -> "symbolic_system.pulse_symbolic_arc_tracker";
    "pulse_argument_checker.py" -> "typing";
    "pulse_autoscan_on_add.py" -> "typing";
    "pulse_autoscan_on_add.py" -> "utils.log_utils";
    "pulse_autoscan_on_add.py" -> "core.path_registry";
    "pulse_batch_alignment_analyzer.py" -> "trust_system.alignment_index";
    "pulse_cli_dashboard.py" -> "utils.log_utils";
    "pulse_cli_dashboard.py" -> "core.path_registry";
    "pulse_cli_dashboard.py" -> "typing";
    "pulse_cli_docgen.py" -> "utils.log_utils";
    "pulse_cli_docgen.py" -> "core.path_registry";
    "pulse_cli_docgen.py" -> "typing";
    "pulse_code_validator.py" -> "typing";
    "pulse_code_validator.py" -> "utils.log_utils";
    "pulse_dir_cleaner.py" -> "collections";
    "pulse_dir_cleaner.py" -> "typing";
    "pulse_dir_cleaner.py" -> "utils.log_utils";
    "pulse_dir_cleaner.py" -> "core.path_registry";
    "pulse_encoding_checker.py" -> "utils.log_utils";
    "pulse_forecast_evaluator.py" -> "typing";
    "pulse_forecast_test_suite.py" -> "datetime";
    "pulse_forecast_test_suite.py" -> "utils.log_utils";
    "pulse_forecast_test_suite.py" -> "core.path_registry";
    "pulse_scan_hooks.py" -> "utils.log_utils";
    "pulse_scan_hooks.py" -> "core.path_registry";
    "pulse_shell_autohook.py" -> "utils.log_utils";
    "pulse_shell_autohook.py" -> "dev_tools.hook_utils";
    "pulse_shell_autohook.py" -> "core.path_registry";
    "pulse_shell_autohook.py" -> "operator_interface.pulse_prompt_logger";
    "pulse_signal_router_v2_cli.py" -> "datetime";
    "pulse_signal_router_v2_cli.py" -> "iris.pulse_signal_router_v2";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_symbolism";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_trust";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_archive";
    "pulse_signal_router_v2_cli.py" -> "iris.pulse_signal_router_v2";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_symbolism";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_trust";
    "pulse_signal_router_v2_cli.py" -> "iris.iris_archive";
    "pulse_test_suite.py" -> "simulation_engine.worldstate";
    "pulse_test_suite.py" -> "simulation_engine.turn_engine";
    "pulse_test_suite.py" -> "utils.log_utils";
    "pulse_ui_bridge.py" -> "typing";
    "pulse_ui_bridge.py" -> "learning.recursion_audit";
    "pulse_ui_bridge.py" -> "dev_tools.pulse_ui_plot";
    "pulse_ui_bridge.py" -> "tkinter";
    "pulse_ui_plot.py" -> "typing";
    "pulse_ui_replay.py" -> "typing";
    "rule_audit_viewer.py" -> "utils.log_utils";
    "rule_audit_viewer.py" -> "core.path_registry";
    "rule_dev_shell.py" -> "simulation_engine.worldstate";
    "rule_dev_shell.py" -> "simulation_engine.causal_rules";
    "rule_dev_shell.py" -> "simulation_engine.rule_engine";
    "rule_dev_shell.py" -> "utils.log_utils";
    "rule_dev_shell.py" -> "core.path_registry";
    "run_symbolic_learning.py" -> "symbolic_system.pulse_symbolic_learning_loop";
    "run_symbolic_sweep.py" -> "learning.symbolic_sweep_scheduler";
    "symbolic_drift_plot.py" -> "typing";
    "symbolic_drift_plot.py" -> "trust_system.trust_engine";
    "symbolic_flip_analyzer.py" -> "memory.forecast_episode_tracer";
    "symbolic_flip_analyzer.py" -> "symbolic_system.symbolic_flip_classifier";
    "visualize_symbolic_graph.py" -> "symbolic_system.symbolic_transition_graph";
    "enhanced_phantom_scanner.py" -> "typing";
    "enhanced_phantom_scanner.py" -> "collections";
    "api_key_test.py" -> "datetime";
    "api_key_test_updated.py" -> "datetime";
    "git_cleanup.py" -> "pathlib";
    "gravity_explainer.py" -> "typing";
    "gravity_explainer.py" -> "datetime";
    "gravity_explainer.py" -> "pathlib";
    "gravity_explainer.py" -> "core.path_registry";
    "gravity_explainer.py" -> "symbolic_system.gravity.symbolic_pillars";
    "gravity_explainer.py" -> "plotly.subplots";
    "shadow_model_monitor.py" -> "collections";
    "historical_timeline_example.py" -> "pathlib";
    "historical_verification_example.py" -> "pathlib";
    "historical_verification_example.py" -> "iris.iris_utils.historical_data_verification";
    "symbolic_overlay_demo.py" -> "datetime";
    "symbolic_overlay_demo.py" -> "pprint";
    "symbolic_overlay_demo.py" -> "simulation_engine.worldstate";
    "symbolic_overlay_demo.py" -> "symbolic_system.context";
    "symbolic_overlay_demo.py" -> "symbolic_system.overlays";
    "symbolic_overlay_demo.py" -> "symbolic_system.config";
    "symbolic_overlay_demo.py" -> "symbolic_system.numeric_transforms";
    "symbolic_overlay_demo.py" -> "symbolic_system.optimization";
    "system_facade.py" -> "core.service_registry";
    "ai_forecaster.py" -> "typing";
    "ensemble_manager.py" -> "typing";
    "ensemble_manager.py" -> "core.pulse_config";
    "forecast_batch_runner.py" -> "datetime";
    "forecast_batch_runner.py" -> "simulation_engine.worldstate";
    "forecast_batch_runner.py" -> "simulation_engine.turn_engine";
    "forecast_batch_runner.py" -> "forecast_engine.forecast_tracker";
    "forecast_batch_runner.py" -> "forecast_engine.forecast_scoring";
    "forecast_batch_runner.py" -> "forecast_engine.forecast_integrity_engine";
    "forecast_batch_runner.py" -> "forecast_engine.forecast_memory";
    "forecast_batch_runner.py" -> "utils.log_utils";
    "forecast_batch_runner.py" -> "core.path_registry";
    "forecast_batch_runner.py" -> "core.pulse_config";
    "forecast_batch_runner.py" -> "learning.recursion_audit";
    "forecast_batch_runner.py" -> "trust_system.license_enforcer";
    "forecast_compressor.py" -> "typing";
    "forecast_drift_monitor.py" -> "typing";
    "forecast_drift_monitor.py" -> "utils.log_utils";
    "forecast_drift_monitor.py" -> "core.path_registry";
    "forecast_drift_monitor.py" -> "river.drift";
    "forecast_ensemble.py" -> "typing";
    "forecast_exporter.py" -> "datetime";
    "forecast_exporter.py" -> "forecast_engine.forecast_tracker";
    "forecast_exporter.py" -> "utils.log_utils";
    "forecast_exporter.py" -> "core.path_registry";
    "forecast_integrity_engine.py" -> "core.pulse_config";
    "forecast_integrity_engine.py" -> "core.path_registry";
    "forecast_integrity_engine.py" -> "core.variable_accessor";
    "forecast_log_viewer.py" -> "tabulate";
    "forecast_log_viewer.py" -> "forecast_engine.forecast_tracker";
    "forecast_log_viewer.py" -> "utils.log_utils";
    "forecast_log_viewer.py" -> "core.path_registry";
    "forecast_memory.py" -> "datetime";
    "forecast_memory.py" -> "typing";
    "forecast_memory.py" -> "core.pulse_config";
    "forecast_memory.py" -> "core.path_registry";
    "forecast_memory.py" -> "memory.forecast_memory";
    "forecast_memory.py" -> "utils.log_utils";
    "forecast_regret_engine.py" -> "typing";
    "forecast_regret_engine.py" -> "typing";
    "forecast_scoring.py" -> "simulation_engine.worldstate";
    "forecast_scoring.py" -> "core.pulse_learning_log";
    "forecast_scoring.py" -> "datetime";
    "forecast_tools.py" -> "forecast_engine.forecast_log_viewer";
    "forecast_tools.py" -> "forecast_engine.forecast_exporter";
    "forecast_tracker.py" -> "datetime";
    "forecast_tracker.py" -> "typing";
    "forecast_tracker.py" -> "forecast_engine.forecast_scoring";
    "forecast_tracker.py" -> "forecast_engine.forecast_memory";
    "forecast_tracker.py" -> "forecast_engine.forecast_integrity_engine";
    "forecast_tracker.py" -> "simulation_engine.worldstate";
    "forecast_tracker.py" -> "utils.log_utils";
    "forecast_tracker.py" -> "memory.forecast_memory";
    "forecast_tracker.py" -> "core.path_registry";
    "hyperparameter_tuner.py" -> "typing";
    "simulation_prioritizer.py" -> "forecast_output.forecast_age_tracker";
    "simulation_prioritizer.py" -> "typing";
    "simulation_prioritizer.py" -> "math";
    "simulation_prioritizer.py" -> "forecast_output.pfpa_logger";
    "cluster_memory_compressor.py" -> "typing";
    "cluster_memory_compressor.py" -> "forecast_output.forecast_cluster_classifier";
    "digest_exporter.py" -> "typing";
    "digest_logger.py" -> "utils.log_utils";
    "digest_logger.py" -> "core.path_registry";
    "digest_logger.py" -> "typing";
    "digest_trace_hooks.py" -> "memory.trace_audit_engine";
    "digest_trace_hooks.py" -> "typing";
    "digest_trace_hooks.py" -> "core.pulse_config";
    "dual_narrative_compressor.py" -> "typing";
    "dual_narrative_compressor.py" -> "collections";
    "dual_narrative_compressor.py" -> "forecast_output.forecast_divergence_detector";
    "forecast_age_tracker.py" -> "typing";
    "forecast_age_tracker.py" -> "utils.log_utils";
    "forecast_age_tracker.py" -> "core.path_registry";
    "forecast_age_tracker.py" -> "forecast_output.pfpa_logger";
    "forecast_cluster_classifier.py" -> "typing";
    "forecast_compressor.py" -> "typing";
    "forecast_compressor.py" -> "forecast_output.forecast_summary_synthesizer";
    "forecast_compressor.py" -> "utils.log_utils";
    "forecast_compressor.py" -> "core.path_registry";
    "forecast_compressor.py" -> "trust_system.trust_engine";
    "forecast_compressor.py" -> "collections";
    "forecast_confidence_gate.py" -> "typing";
    "forecast_confidence_gate.py" -> "datetime";
    "forecast_confidence_gate.py" -> "core.path_registry";
    "forecast_confidence_gate.py" -> "core.pulse_config";
    "forecast_confidence_gate.py" -> "typing";
    "forecast_conflict_resolver.py" -> "typing";
    "forecast_contradiction_detector.py" -> "typing";
    "forecast_contradiction_detector.py" -> "datetime";
    "forecast_contradiction_detector.py" -> "collections";
    "forecast_contradiction_detector.py" -> "core.path_registry";
    "forecast_contradiction_detector.py" -> "core.pulse_learning_log";
    "forecast_contradiction_digest.py" -> "collections";
    "forecast_contradiction_digest.py" -> "typing";
    "forecast_contradiction_digest.py" -> "core.path_registry";
    "forecast_divergence_detector.py" -> "typing";
    "forecast_divergence_detector.py" -> "collections";
    "forecast_fidelity_certifier.py" -> "typing";
    "forecast_formatter.py" -> "typing";
    "forecast_formatter.py" -> "memory.forecast_memory";
    "forecast_formatter.py" -> "core.path_registry";
    "forecast_generator.py" -> "typing";
    "forecast_generator.py" -> "forecast_engine";
    "forecast_generator.py" -> "causal_model.structural_causal_model";
    "forecast_generator.py" -> "causal_model.discovery";
    "forecast_generator.py" -> "causal_model.counterfactual_engine";
    "forecast_licenser.py" -> "typing";
    "forecast_licenser.py" -> "utils.log_utils";
    "forecast_licenser.py" -> "core.pulse_config";
    "forecast_memory_promoter.py" -> "typing";
    "forecast_memory_promoter.py" -> "forecast_output.forecast_prioritization_engine";
    "forecast_memory_promoter.py" -> "memory.forecast_memory";
    "forecast_memory_promoter.py" -> "utils.log_utils";
    "forecast_pipeline_cli.py" -> "learning.forecast_pipeline_runner";
    "forecast_prioritization_engine.py" -> "typing";
    "forecast_resonance_scanner.py" -> "typing";
    "forecast_resonance_scanner.py" -> "collections";
    "forecast_summary_synthesizer.py" -> "typing";
    "forecast_summary_synthesizer.py" -> "datetime";
    "forecast_summary_synthesizer.py" -> "core.path_registry";
    "forecast_summary_synthesizer.py" -> "core.pulse_config";
    "forecast_summary_synthesizer.py" -> "symbolic_system.pulse_symbolic_arc_tracker";
    "forecast_summary_synthesizer.py" -> "trust_system.alignment_index";
    "forecast_summary_synthesizer.py" -> "trust_system.forecast_episode_logger";
    "forecast_summary_synthesizer.py" -> "symbolic_system.symbolic_convergence_detector";
    "forecast_summary_synthesizer.py" -> "utils.log_utils";
    "forecast_tags.py" -> "enum";
    "mutation_compression_engine.py" -> "typing";
    "mutation_compression_engine.py" -> "memory.forecast_episode_tracer";
    "mutation_compression_engine.py" -> "symbolic_system.symbolic_flip_classifier";
    "pfpa_logger.py" -> "forecast_output.forecast_age_tracker";
    "pfpa_logger.py" -> "memory.forecast_memory";
    "pfpa_logger.py" -> "typing";
    "pfpa_logger.py" -> "utils.log_utils";
    "pfpa_logger.py" -> "core.pulse_config";
    "pfpa_logger.py" -> "core.path_registry";
    "pfpa_logger.py" -> "trust_system.trust_engine";
    "pfpa_logger.py" -> "pathlib";
    "pulse_converge.py" -> "typing";
    "pulse_converge.py" -> "collections";
    "pulse_forecast_lineage.py" -> "typing";
    "strategic_fork_resolver.py" -> "typing";
    "strategic_fork_resolver.py" -> "forecast_output.forecast_prioritization_engine";
    "strategic_fork_resolver.py" -> "forecast_output.forecast_cluster_classifier";
    "strategos_digest_builder.py" -> "typing";
    "strategos_digest_builder.py" -> "collections";
    "strategos_digest_builder.py" -> "forecast_output.digest_trace_hooks";
    "strategos_digest_builder.py" -> "forecast_output.pulse_forecast_lineage";
    "strategos_digest_builder.py" -> "forecast_output.forecast_divergence_detector";
    "strategos_digest_builder.py" -> "datetime";
    "strategos_digest_builder.py" -> "symbolic_system.pulse_symbolic_learning_loop";
    "strategos_digest_builder.py" -> "forecast_output.mutation_compression_engine";
    "strategos_digest_builder.py" -> "operator_interface.symbolic_contradiction_digest";
    "strategos_digest_builder.py" -> "collections";
    "strategos_digest_builder.py" -> "collections";
    "strategos_digest_builder.py" -> "forecast_output.cluster_memory_compressor";
    "strategos_digest_builder.py" -> "core.path_registry";
    "strategos_digest_builder.py" -> "memory.cluster_mutation_tracker";
    "strategos_digest_builder.py" -> "forecast_output.dual_narrative_compressor";
    "strategos_digest_builder.py" -> "forecast_output.strategic_fork_resolver";
    "strategos_digest_builder.py" -> "forecast_output.cluster_memory_compressor";
    "strategos_digest_builder.py" -> "memory.forecast_memory_entropy";
    "strategos_tile_formatter.py" -> "typing";
    "strategos_tile_formatter.py" -> "core.path_registry";
    "symbolic_tuning_engine.py" -> "typing";
    "symbolic_tuning_engine.py" -> "trust_system.alignment_index";
    "symbolic_tuning_engine.py" -> "trust_system.license_enforcer";
    "gpt_causal_translator.py" -> "typing";
    "gpt_forecast_divergence_logger.py" -> "typing";
    "gpt_rule_fingerprint_extractor.py" -> "typing";
    "gpt_symbolic_convergence_loss.py" -> "typing";
    "gpt_symbolic_convergence_loss.py" -> "intelligence.forecast_schema";
    "gpt_symbolic_convergence_loss.py" -> "pydantic";
    "forecast_schema.py" -> "pydantic";
    "forecast_schema.py" -> "pydantic";
    "forecast_schema.py" -> "typing";
    "function_router.py" -> "__future__";
    "function_router.py" -> "types";
    "function_router.py" -> "typing";
    "function_router.py" -> "intelligence.intelligence_config";
    "intelligence_core.py" -> "__future__";
    "intelligence_core.py" -> "pathlib";
    "intelligence_core.py" -> "typing";
    "intelligence_core.py" -> "intelligence.function_router";
    "intelligence_core.py" -> "intelligence.worldstate_loader";
    "intelligence_core.py" -> "intelligence.simulation_executor";
    "intelligence_core.py" -> "intelligence.intelligence_observer";
    "intelligence_core.py" -> "intelligence.upgrade_sandbox_manager";
    "intelligence_core.py" -> "simulation_engine.worldstate";
    "intelligence_observer.py" -> "typing";
    "intelligence_observer.py" -> "intelligence.function_router";
    "intelligence_observer.py" -> "intelligence.intelligence_config";
    "intelligence_observer.py" -> "intelligence.upgrade_sandbox_manager";
    "intelligence_shell.py" -> "typing";
    "intelligence_shell.py" -> "intelligence.intelligence_core";
    "intelligence_shell.py" -> "intelligence.function_router";
    "intelligence_shell.py" -> "intelligence.simulation_executor";
    "intelligence_shell.py" -> "intelligence.intelligence_observer";
    "intelligence_shell.py" -> "intelligence.upgrade_sandbox_manager";
    "simulation_executor.py" -> "__future__";
    "simulation_executor.py" -> "typing";
    "simulation_executor.py" -> "forecast_engine.forecast_compressor";
    "simulation_executor.py" -> "intelligence.forecast_schema";
    "simulation_executor.py" -> "pydantic";
    "simulation_executor.py" -> "intelligence.function_router";
    "simulation_executor.py" -> "pipeline.gpt_caller";
    "simulation_executor.py" -> "intelligence.intelligence_config";
    "simulation_executor.py" -> "config";
    "simulation_executor.py" -> "core.variable_registry";
    "simulation_executor.py" -> "simulation_engine.causal_rules";
    "simulation_executor.py" -> "simulation_engine.worldstate";
    "upgrade_sandbox_manager.py" -> "typing";
    "upgrade_sandbox_manager.py" -> "intelligence.intelligence_config";
    "worldstate_loader.py" -> "__future__";
    "worldstate_loader.py" -> "pathlib";
    "worldstate_loader.py" -> "typing";
    "worldstate_loader.py" -> "simulation_engine.worldstate";
    "worldstate_loader.py" -> "core.variable_registry";
    "worldstate_loader.py" -> "iris.variable_ingestion";
    "worldstate_loader.py" -> "intelligence.intelligence_config";
    "worldstate_loader.py" -> "simulation_engine.worldstate";
    "worldstate_loader.py" -> "simulation_engine.worldstate";
    "core_interface.py" -> "abc";
    "core_interface.py" -> "typing";
    "simulation_interface.py" -> "abc";
    "simulation_interface.py" -> "typing";
    "symbolic_interface.py" -> "abc";
    "symbolic_interface.py" -> "typing";
    "trust_interface.py" -> "abc";
    "trust_interface.py" -> "typing";
    "high_frequency_indicators.py" -> "data.high_frequency_data_access";
    "high_frequency_indicators.py" -> "data.high_frequency_data_store";
    "high_frequency_ingestion.py" -> "typing";
    "high_frequency_ingestion.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "high_frequency_ingestion.py" -> "iris.iris_utils.ingestion_persistence";
    "high_frequency_ingestion.py" -> "data.high_frequency_data_store";
    "high_frequency_ingestion.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "high_frequency_ingestion.py" -> "data.high_frequency_data_store";
    "ingest_api.py" -> "iris.iris_scraper";
    "ingest_api.py" -> "fastapi";
    "ingest_api.py" -> "fastapi.responses";
    "ingest_api.py" -> "pydantic";
    "ingest_api.py" -> "typing";
    "ingest_api.py" -> "core.celery_app";
    "ingest_api.py" -> "core.metrics";
    "ingest_api.py" -> "prometheus_client";
    "ingest_db.py" -> "iris.iris_scraper";
    "ingest_db.py" -> "sqlalchemy";
    "ingest_db.py" -> "sqlalchemy.exc";
    "ingest_db.py" -> "core.celery_app";
    "ingest_db.py" -> "core.metrics";
    "ingest_fs.py" -> "iris.iris_scraper";
    "ingest_fs.py" -> "watchdog.observers";
    "ingest_fs.py" -> "watchdog.events";
    "ingest_fs.py" -> "core.celery_app";
    "ingest_fs.py" -> "core.metrics";
    "ingest_kafka.py" -> "iris.iris_scraper";
    "ingest_kafka.py" -> "kafka";
    "ingest_kafka.py" -> "core.celery_app";
    "ingest_kafka.py" -> "core.metrics";
    "ingest_s3.py" -> "iris.iris_scraper";
    "ingest_s3.py" -> "core.celery_app";
    "ingest_s3.py" -> "core.metrics";
    "ingest_thirdparty.py" -> "iris.iris_scraper";
    "ingest_thirdparty.py" -> "core.celery_app";
    "ingest_thirdparty.py" -> "core.metrics";
    "iris_archive.py" -> "typing";
    "iris_plugins.py" -> "typing";
    "iris_plugins.py" -> "iris_plugins_finance";
    "iris_plugins.py" -> "iris_plugins_variable_ingestion";
    "iris_plugins_finance.py" -> "__future__";
    "iris_plugins_finance.py" -> "typing";
    "iris_scraper.py" -> "datetime";
    "iris_scraper.py" -> "typing";
    "iris_scraper.py" -> "iris.iris_trust";
    "iris_scraper.py" -> "iris.iris_symbolism";
    "iris_scraper.py" -> "iris.iris_plugins";
    "iris_scraper.py" -> "iris.iris_archive";
    "iris_symbolism.py" -> "typing";
    "iris_symbolism.py" -> "transformers";
    "iris_trust.py" -> "datetime";
    "iris_trust.py" -> "sklearn.ensemble";
    "iris_trust.py" -> "typing";
    "pulse_signal_router_v2.py" -> "datetime";
    "pulse_signal_router_v2.py" -> "typing";
    "pulse_signal_router_v2.py" -> "iris.iris_symbolism";
    "pulse_signal_router_v2.py" -> "iris.iris_trust";
    "pulse_signal_router_v2.py" -> "iris.iris_archive";
    "pulse_signal_router_v2.py" -> "iris_symbolism";
    "pulse_signal_router_v2.py" -> "iris_trust";
    "pulse_signal_router_v2.py" -> "iris_archive";
    "retrieve_historical_data.py" -> "iris.iris_utils.historical_data_retriever";
    "signal_gating.py" -> "typing";
    "signal_gating.py" -> "memory.pulsegrow";
    "test_alpha_vantage.py" -> "pprint";
    "test_alpha_vantage.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "test_github.py" -> "pprint";
    "test_github.py" -> "iris.iris_plugins_variable_ingestion.github_plugin";
    "test_newsapi_direct.py" -> "pprint";
    "test_newsapi_direct.py" -> "iris.iris_plugins_variable_ingestion.newsapi_plugin";
    "test_open_meteo.py" -> "pprint";
    "test_open_meteo.py" -> "iris.iris_plugins_variable_ingestion.open_meteo_plugin";
    "test_plugins.py" -> "typing";
    "test_plugins.py" -> "iris.iris_plugins";
    "test_reddit.py" -> "pprint";
    "test_reddit.py" -> "iris.iris_plugins_variable_ingestion.reddit_plugin";
    "test_reddit_direct.py" -> "pprint";
    "test_reddit_direct.py" -> "iris.iris_plugins_variable_ingestion.reddit_plugin";
    "test_world_bank.py" -> "pprint";
    "test_world_bank.py" -> "iris.iris_plugins_variable_ingestion.worldbank_plugin";
    "variable_ingestion.py" -> "__future__";
    "variable_ingestion.py" -> "datetime";
    "variable_ingestion.py" -> "fredapi";
    "variable_ingestion.py" -> "core.variable_registry";
    "variable_recommender.py" -> "typing";
    "variable_recommender.py" -> "memory.variable_performance_tracker";
    "variable_recommender.py" -> "memory.pulsegrow";
    "acled_plugin.py" -> "typing";
    "acled_plugin.py" -> "iris.iris_plugins";
    "alpha_vantage_plugin.py" -> "typing";
    "alpha_vantage_plugin.py" -> "iris.iris_plugins";
    "alpha_vantage_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "bls_plugin.py" -> "datetime";
    "bls_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "cboe_plugin.py" -> "datetime";
    "cdc_socrata_plugin.py" -> "typing";
    "cdc_socrata_plugin.py" -> "iris.iris_plugins";
    "census_plugin.py" -> "datetime";
    "census_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "cia_factbook_plugin.py" -> "typing";
    "cia_factbook_plugin.py" -> "iris.iris_plugins";
    "coinmarketcap_plugin.py" -> "typing";
    "coinmarketcap_plugin.py" -> "iris.iris_plugins";
    "coinmarketcap_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "data_portal_plugin.py" -> "typing";
    "data_portal_plugin.py" -> "iris.iris_plugins";
    "financial_news_plugin.py" -> "typing";
    "financial_news_plugin.py" -> "iris.iris_plugins";
    "financial_news_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "fred_plugin.py" -> "datetime";
    "fred_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "gdelt_plugin.py" -> "typing";
    "gdelt_plugin.py" -> "urllib.parse";
    "gdelt_plugin.py" -> "collections";
    "gdelt_plugin.py" -> "iris.iris_plugins";
    "gdelt_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "github_plugin.py" -> "collections";
    "github_plugin.py" -> "typing";
    "github_plugin.py" -> "iris.iris_plugins";
    "google_trends_plugin.py" -> "typing";
    "google_trends_plugin.py" -> "iris.iris_plugins";
    "google_trends_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "google_trends_plugin.py" -> "pytrends.request";
    "google_trends_plugin.py" -> "pytrends.request";
    "hackernews_plugin.py" -> "collections";
    "hackernews_plugin.py" -> "typing";
    "hackernews_plugin.py" -> "iris.iris_plugins";
    "healthmap_plugin.py" -> "typing";
    "healthmap_plugin.py" -> "collections";
    "healthmap_plugin.py" -> "urllib.parse";
    "healthmap_plugin.py" -> "iris.iris_plugins";
    "healthmap_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "high_frequency_indicator_plugin.py" -> "typing";
    "high_frequency_indicator_plugin.py" -> "data.high_frequency_data_access";
    "high_frequency_indicator_plugin.py" -> "data.high_frequency_data_store";
    "high_frequency_indicator_plugin.py" -> "iris.high_frequency_indicators";
    "high_frequency_indicator_plugin.py" -> "core.variable_registry";
    "high_frequency_indicator_plugin.py" -> "iris.iris_plugins";
    "high_frequency_indicator_plugin.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "historical_ingestion_plugin.py" -> "__future__";
    "historical_ingestion_plugin.py" -> "typing";
    "historical_ingestion_plugin.py" -> "fredapi";
    "historical_ingestion_plugin.py" -> "pandas";
    "historical_ingestion_plugin.py" -> "core.variable_registry";
    "ism_plugin.py" -> "datetime";
    "manual_opec_plugin.py" -> "typing";
    "manual_opec_plugin.py" -> "iris.iris_plugins";
    "manual_opec_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "mediastack_plugin.py" -> "typing";
    "mediastack_plugin.py" -> "iris.iris_plugins";
    "nasa_power_plugin.py" -> "typing";
    "nasa_power_plugin.py" -> "iris.iris_plugins";
    "nasa_power_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "nasdaq_plugin.py" -> "__future__";
    "nasdaq_plugin.py" -> "typing";
    "nasdaq_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "newsapi_plugin.py" -> "collections";
    "newsapi_plugin.py" -> "typing";
    "newsapi_plugin.py" -> "iris.iris_plugins";
    "noaa_cdo_plugin.py" -> "typing";
    "noaa_cdo_plugin.py" -> "iris.iris_plugins";
    "openaq_plugin.py" -> "typing";
    "openaq_plugin.py" -> "iris.iris_plugins";
    "openaq_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "openfda_plugin.py" -> "typing";
    "openfda_plugin.py" -> "collections";
    "openfda_plugin.py" -> "iris.iris_plugins";
    "openfda_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "open_meteo_plugin.py" -> "typing";
    "open_meteo_plugin.py" -> "iris.iris_plugins";
    "patentsview_plugin.py" -> "typing";
    "patentsview_plugin.py" -> "iris.iris_plugins";
    "reddit_plugin.py" -> "collections";
    "reddit_plugin.py" -> "typing";
    "reddit_plugin.py" -> "iris.iris_plugins";
    "stackexchange_plugin.py" -> "typing";
    "stackexchange_plugin.py" -> "iris.iris_plugins";
    "twitter_plugin.py" -> "typing";
    "twitter_plugin.py" -> "iris.iris_plugins";
    "umich_sentiment_plugin.py" -> "datetime";
    "vi_plugin.py" -> "datetime";
    "vi_plugin.py" -> "iris.variable_ingestion";
    "who_gho_plugin.py" -> "typing";
    "who_gho_plugin.py" -> "iris.iris_plugins";
    "wikidata_plugin.py" -> "typing";
    "wikidata_plugin.py" -> "urllib.parse";
    "wikidata_plugin.py" -> "iris.iris_plugins";
    "wikidata_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "wolfram_plugin.py" -> "typing";
    "wolfram_plugin.py" -> "iris.iris_plugins";
    "worldbank_plugin.py" -> "typing";
    "worldbank_plugin.py" -> "iris.iris_plugins";
    "world_bank_plugin.py" -> "typing";
    "world_bank_plugin.py" -> "urllib.parse";
    "world_bank_plugin.py" -> "iris.iris_plugins";
    "world_bank_plugin.py" -> "iris.iris_utils.ingestion_persistence";
    "__init__.py" -> "vi_plugin";
    "__init__.py" -> "historical_ingestion_plugin";
    "cli_historical_data.py" -> "datetime";
    "cli_historical_data.py" -> "pathlib";
    "cli_historical_data.py" -> "typing";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_retriever";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_transformer";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_verification";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_repair";
    "cli_historical_data.py" -> "iris.iris_utils.world_bank_integration";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_verification";
    "cli_historical_data.py" -> "recursive_training.data.data_store";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_retriever";
    "cli_historical_data.py" -> "iris.iris_utils.historical_data_retriever";
    "historical_data_repair.py" -> "__future__";
    "historical_data_repair.py" -> "abc";
    "historical_data_repair.py" -> "dataclasses";
    "historical_data_repair.py" -> "enum";
    "historical_data_repair.py" -> "pathlib";
    "historical_data_repair.py" -> "typing";
    "historical_data_repair.py" -> "scipy";
    "historical_data_repair.py" -> "iris.iris_utils.historical_data_verification";
    "historical_data_repair.py" -> "statsmodels.tsa.arima.model";
    "historical_data_repair.py" -> "statsmodels.tsa.statespace.sarimax";
    "historical_data_repair.py" -> "statsmodels.nonparametric.smoothers_lowess";
    "historical_data_repair.py" -> "statsmodels.tsa.arima.model";
    "historical_data_repair.py" -> "statsmodels.tsa.statespace.sarimax";
    "historical_data_repair.py" -> "statsmodels.nonparametric.smoothers_lowess";
    "historical_data_retriever.py" -> "__future__";
    "historical_data_retriever.py" -> "dataclasses";
    "historical_data_retriever.py" -> "pathlib";
    "historical_data_retriever.py" -> "typing";
    "historical_data_retriever.py" -> "fredapi";
    "historical_data_retriever.py" -> "iris.iris_utils.ingestion_persistence";
    "historical_data_transformer.py" -> "__future__";
    "historical_data_transformer.py" -> "datetime";
    "historical_data_transformer.py" -> "enum";
    "historical_data_transformer.py" -> "pathlib";
    "historical_data_transformer.py" -> "typing";
    "historical_data_transformer.py" -> "dateutil.parser";
    "historical_data_transformer.py" -> "iris.iris_utils.historical_data_retriever";
    "historical_data_transformer.py" -> "recursive_training.data.data_store";
    "historical_data_verification.py" -> "__future__";
    "historical_data_verification.py" -> "dataclasses";
    "historical_data_verification.py" -> "enum";
    "historical_data_verification.py" -> "pathlib";
    "historical_data_verification.py" -> "typing";
    "historical_data_verification.py" -> "scipy";
    "historical_data_verification.py" -> "scipy.signal";
    "historical_data_verification.py" -> "iris.iris_utils.historical_data_retriever";
    "historical_data_verification.py" -> "statsmodels.tsa.stattools";
    "historical_data_verification.py" -> "collections";
    "historical_data_verification.py" -> "collections";
    "historical_data_verification.py" -> "sklearn.ensemble";
    "ingestion_persistence.py" -> "__future__";
    "ingestion_persistence.py" -> "typing";
    "test_historical_data_pipeline.py" -> "pathlib";
    "test_historical_data_pipeline.py" -> "pprint";
    "test_historical_data_pipeline.py" -> "iris.iris_utils.historical_data_retriever";
    "test_historical_data_pipeline.py" -> "iris.iris_utils.historical_data_transformer";
    "world_bank_integration.py" -> "__future__";
    "world_bank_integration.py" -> "collections";
    "world_bank_integration.py" -> "datetime";
    "world_bank_integration.py" -> "pathlib";
    "world_bank_integration.py" -> "typing";
    "world_bank_integration.py" -> "iris.iris_utils.historical_data_transformer";
    "world_bank_integration.py" -> "iris.iris_utils.historical_data_retriever";
    "world_bank_integration.py" -> "recursive_training.data.data_store";
    "diagnose_pulse.py" -> "simulation_engine.worldstate";
    "diagnose_pulse.py" -> "symbolic_system.symbolic_utils";
    "diagnose_pulse.py" -> "capital_engine.capital_layer";
    "diagnose_pulse.py" -> "typing";
    "diagnose_pulse.py" -> "utils.log_utils";
    "diagnose_pulse.py" -> "core.path_registry";
    "forecast_pipeline_runner.py" -> "typing";
    "forecast_pipeline_runner.py" -> "core.pulse_config";
    "forecast_pipeline_runner.py" -> "forecast_output.forecast_compressor";
    "forecast_pipeline_runner.py" -> "intelligence.forecast_schema";
    "forecast_pipeline_runner.py" -> "pydantic";
    "forecast_pipeline_runner.py" -> "forecast_output.forecast_summary_synthesizer";
    "forecast_pipeline_runner.py" -> "forecast_output.strategos_digest_builder";
    "forecast_pipeline_runner.py" -> "trust_system.trust_engine";
    "forecast_pipeline_runner.py" -> "trust_system.fragility_detector";
    "forecast_pipeline_runner.py" -> "memory.trace_audit_engine";
    "forecast_pipeline_runner.py" -> "memory.forecast_memory";
    "forecast_pipeline_runner.py" -> "utils.log_utils";
    "forecast_pipeline_runner.py" -> "forecast_output.forecast_prioritization_engine";
    "forecast_pipeline_runner.py" -> "memory.forecast_memory_promoter";
    "forecast_pipeline_runner.py" -> "capital_engine.capital_layer";
    "forecast_pipeline_runner.py" -> "forecast_output.forecast_confidence_gate";
    "forecast_pipeline_runner.py" -> "memory.trace_memory";
    "forecast_pipeline_runner.py" -> "memory.variable_performance_tracker";
    "forecast_pipeline_runner.py" -> "forecast_output.forecast_contradiction_detector";
    "forecast_pipeline_runner.py" -> "core.pulse_learning_log";
    "forecast_pipeline_runner.py" -> "GPT.gpt_causal_translator";
    "forecast_pipeline_runner.py" -> "GPT.gpt_rule_fingerprint_extractor";
    "forecast_pipeline_runner.py" -> "GPT.gpt_symbolic_convergence_loss";
    "forecast_pipeline_runner.py" -> "GPT.gpt_forecast_divergence_logger";
    "forecast_pipeline_runner.py" -> "symbolic_system.pulse_symbolic_arc_tracker";
    "history_tracker.py" -> "typing";
    "learning.py" -> "typing";
    "learning.py" -> "datetime";
    "learning.py" -> "datetime";
    "learning.py" -> "memory.trace_memory";
    "learning.py" -> "memory.variable_performance_tracker";
    "learning.py" -> "core.variable_registry";
    "learning.py" -> "core.bayesian_trust_tracker";
    "learning.py" -> "core.optimized_trust_tracker";
    "learning.py" -> "sklearn.feature_selection";
    "learning.py" -> "learning.output_data_reader";
    "learning.py" -> "trust_system.trust_engine";
    "learning.py" -> "simulation_engine.rule_mutation_engine";
    "learning.py" -> "memory.variable_cluster_engine";
    "learning.py" -> "memory.rule_cluster_engine";
    "learning.py" -> "symbolic_system.symbolic_contradiction_cluster";
    "learning.py" -> "core.pulse_learning_log";
    "learning.py" -> "operator_interface.rule_cluster_digest_formatter";
    "learning.py" -> "operator_interface.variable_cluster_digest_formatter";
    "learning.py" -> "operator_interface.mutation_digest_exporter";
    "learning.py" -> "operator_interface.symbolic_contradiction_digest";
    "learning.py" -> "core.pulse_learning_log";
    "learning.py" -> "core.pulse_learning_log";
    "learning.py" -> "core.pulse_learning_log";
    "learning.py" -> "core.pulse_learning_log";
    "learning_profile.py" -> "dataclasses";
    "learning_profile.py" -> "typing";
    "output_data_reader.py" -> "typing";
    "output_data_reader.py" -> "core.schemas";
    "output_data_reader.py" -> "pydantic";
    "plia_stub.py" -> "simulation_engine.worldstate";
    "plia_stub.py" -> "symbolic_system.symbolic_utils";
    "plia_stub.py" -> "capital_engine.capital_layer";
    "plia_stub.py" -> "typing";
    "plia_stub.py" -> "utils.log_utils";
    "plia_stub.py" -> "simulation_engine.worldstate";
    "promote_memory_forecasts.py" -> "memory.forecast_memory_promoter";
    "pulse_ui_audit_cycle.py" -> "learning.recursion_audit";
    "recursion_audit.py" -> "typing";
    "recursion_audit.py" -> "collections";
    "retrodiction_bootstrap.py" -> "fredapi";
    "retrodiction_bootstrap.py" -> "pytrends.request";
    "retrodiction_bootstrap.py" -> "datetime";
    "retrodiction_curriculum.py" -> "typing";
    "symbolic_sweep_scheduler.py" -> "datetime";
    "symbolic_sweep_scheduler.py" -> "typing";
    "symbolic_sweep_scheduler.py" -> "memory.memory_repair_queue";
    "symbolic_sweep_scheduler.py" -> "trust_system.recovered_forecast_scorer";
    "trace_forecast_episode.py" -> "memory.forecast_episode_tracer";
    "trust_audit.py" -> "forecast_output.pfpa_logger";
    "trust_audit.py" -> "statistics";
    "trust_audit.py" -> "utils.log_utils";
    "trust_audit.py" -> "core.pulse_config";
    "feature_discovery.py" -> "sklearn.cluster";
    "feature_discovery.py" -> "sklearn.decomposition";
    "feature_discovery.py" -> "sklearn.manifold";
    "feature_discovery.py" -> "sklearn.feature_selection";
    "feature_discovery.py" -> "pydantic";
    "feature_discovery.py" -> "core.pulse_learning_log";
    "feature_discovery.py" -> "datetime";
    "feature_discovery.py" -> "typing";
    "basic_transforms.py" -> "typing";
    "rolling_features.py" -> "typing";
    "cluster_mutation_tracker.py" -> "typing";
    "cluster_mutation_tracker.py" -> "collections";
    "cluster_mutation_tracker.py" -> "forecast_output.forecast_cluster_classifier";
    "contradiction_resolution_tracker.py" -> "typing";
    "contradiction_resolution_tracker.py" -> "core.path_registry";
    "contradiction_resolution_tracker.py" -> "memory.forecast_memory";
    "forecast_episode_tracer.py" -> "typing";
    "forecast_memory.py" -> "core.path_registry";
    "forecast_memory.py" -> "typing";
    "forecast_memory.py" -> "trust_system.license_enforcer";
    "forecast_memory.py" -> "core.pulse_learning_log";
    "forecast_memory.py" -> "datetime";
    "forecast_memory.py" -> "utils.log_utils";
    "forecast_memory.py" -> "memory.cluster_mutation_tracker";
    "forecast_memory_entropy.py" -> "typing";
    "forecast_memory_entropy.py" -> "collections";
    "forecast_memory_promoter.py" -> "typing";
    "memory_repair_queue.py" -> "typing";
    "memory_repair_queue.py" -> "trust_system.license_enforcer";
    "pulsegrow.py" -> "typing";
    "pulsegrow.py" -> "core.variable_registry";
    "pulse_memory_audit_report.py" -> "memory.forecast_memory";
    "pulse_memory_guardian.py" -> "typing";
    "pulse_memory_guardian.py" -> "memory.forecast_memory";
    "pulse_memory_guardian.py" -> "trust_system.trust_engine";
    "rule_cluster_engine.py" -> "typing";
    "rule_cluster_engine.py" -> "core.path_registry";
    "rule_cluster_engine.py" -> "collections";
    "rule_cluster_engine.py" -> "simulation_engine.rules.rule_registry";
    "trace_audit_engine.py" -> "typing";
    "trace_audit_engine.py" -> "core.path_registry";
    "trace_audit_engine.py" -> "memory.forecast_memory";
    "trace_audit_engine.py" -> "utils.log_utils";
    "trace_audit_engine.py" -> "core.pulse_config";
    "trace_audit_engine.py" -> "main";
    "trace_memory.py" -> "typing";
    "trace_memory.py" -> "datetime";
    "trace_memory.py" -> "core.path_registry";
    "variable_cluster_engine.py" -> "collections";
    "variable_cluster_engine.py" -> "typing";
    "variable_cluster_engine.py" -> "core.variable_registry";
    "variable_cluster_engine.py" -> "memory.variable_performance_tracker";
    "variable_performance_tracker.py" -> "typing";
    "variable_performance_tracker.py" -> "datetime";
    "variable_performance_tracker.py" -> "core.path_registry";
    "variable_performance_tracker.py" -> "core.variable_registry";
    "variable_performance_tracker.py" -> "core.pulse_learning_log";
    "803d47231794_current_schema.py" -> "typing";
    "803d47231794_current_schema.py" -> "alembic";
    "learning_log_viewer.py" -> "typing";
    "learning_log_viewer.py" -> "collections";
    "learning_log_viewer.py" -> "datetime";
    "learning_log_viewer.py" -> "core.path_registry";
    "learning_log_viewer.py" -> "core.bayesian_trust_tracker";
    "mutation_digest_exporter.py" -> "datetime";
    "mutation_digest_exporter.py" -> "operator_interface.rule_cluster_digest_formatter";
    "mutation_digest_exporter.py" -> "operator_interface.variable_cluster_digest_formatter";
    "mutation_digest_exporter.py" -> "operator_interface.mutation_log_viewer";
    "mutation_digest_exporter.py" -> "core.path_registry";
    "mutation_log_viewer.py" -> "collections";
    "mutation_log_viewer.py" -> "typing";
    "mutation_log_viewer.py" -> "core.path_registry";
    "operator_brief_generator.py" -> "datetime";
    "operator_brief_generator.py" -> "typing";
    "operator_brief_generator.py" -> "trust_system.forecast_episode_logger";
    "operator_brief_generator.py" -> "simulation_engine.simulation_drift_detector";
    "pulse_prompt_logger.py" -> "datetime";
    "pulse_prompt_logger.py" -> "datetime";
    "rule_cluster_digest_formatter.py" -> "memory.rule_cluster_engine";
    "rule_cluster_viewer.py" -> "memory.rule_cluster_engine";
    "strategos_digest.py" -> "typing";
    "strategos_digest.py" -> "forecast_output.forecast_licenser";
    "strategos_digest.py" -> "forecast_output.strategos_tile_formatter";
    "strategos_digest.py" -> "forecast_output.strategos_digest_builder";
    "strategos_digest.py" -> "memory.forecast_memory";
    "strategos_digest.py" -> "core.path_registry";
    "strategos_digest.py" -> "trust_system.alignment_index";
    "strategos_digest.py" -> "trust_system.forecast_episode_logger";
    "strategos_digest.py" -> "trust_system.trust_engine";
    "strategos_digest.py" -> "trust_system.forecast_licensing_shell";
    "strategos_digest.py" -> "simulation_engine.simulation_drift_detector";
    "strategos_digest.py" -> "trust_system.license_enforcer";
    "strategos_digest.py" -> "forecast_output.mutation_compression_engine";
    "strategos_digest.py" -> "memory.forecast_episode_tracer";
    "strategos_digest.py" -> "symbolic_system.symbolic_transition_graph";
    "strategos_digest.py" -> "forecast_output.forecast_resonance_scanner";
    "strategos_digest.py" -> "forecast_output.forecast_fidelity_certifier";
    "strategos_digest.py" -> "forecast_output.forecast_prioritization_engine";
    "strategos_digest.py" -> "forecast_output.forecast_cluster_classifier";
    "strategos_digest.py" -> "operator_interface.rule_cluster_digest_formatter";
    "strategos_digest.py" -> "symbolic_system.pulse_symbolic_learning_loop";
    "strategos_digest.py" -> "symbolic_system.symbolic_upgrade_planner";
    "strategos_digest.py" -> "symbolic_system.symbolic_executor";
    "strategos_digest.py" -> "trust_system.recovered_forecast_scorer";
    "strategos_digest.py" -> "forecast_output.strategos_digest_builder";
    "symbolic_contradiction_digest.py" -> "typing";
    "symbolic_contradiction_digest.py" -> "core.path_registry";
    "symbolic_revision_report.py" -> "collections";
    "symbolic_revision_report.py" -> "typing";
    "variable_cluster_digest_formatter.py" -> "memory.variable_cluster_engine";
    "evaluator.py" -> "typing";
    "evaluator.py" -> "GPT.gpt_symbolic_convergence_loss";
    "evaluator.py" -> "intelligence.forecast_schema";
    "evaluator.py" -> "pydantic";
    "gpt_caller.py" -> "typing";
    "ingestion_service.py" -> "iris.iris_scraper";
    "ingestion_service.py" -> "typing";
    "model_manager.py" -> "typing";
    "orchestrator.py" -> "pipeline.preprocessor";
    "orchestrator.py" -> "pipeline.model_manager";
    "orchestrator.py" -> "pipeline.evaluator";
    "orchestrator.py" -> "pipeline.rule_engine";
    "preprocessor.py" -> "typing";
    "preprocessor.py" -> "pathlib";
    "loader.py" -> "typing";
    "loader.py" -> "pathlib";
    "loader.py" -> "dotenv";
    "__main__.py" -> "loader";
    "api.py" -> "flask";
    "ui_operator.py" -> "learning.recursion_audit";
    "ui_operator.py" -> "dev_tools.pulse_ui_plot";
    "ui_operator.py" -> "operator_interface.learning_log_viewer";
    "ui_operator.py" -> "memory.variable_cluster_engine";
    "ui_operator.py" -> "operator_interface.variable_cluster_digest_formatter";
    "ui_operator.py" -> "operator_interface.mutation_digest_exporter";
    "ui_operator.py" -> "operator_interface.symbolic_contradiction_digest";
    "ui_operator.py" -> "typing";
    "ui_operator.py" -> "tkinter";
    "ui_operator.py" -> "learning.forecast_pipeline_runner";
    "ui_operator.py" -> "operator_interface.symbolic_contradiction_digest";
    "ui_shell.py" -> "typing";
    "ui_shell.py" -> "simulation_engine.turn_engine";
    "ui_shell.py" -> "simulation_engine.worldstate";
    "ui_shell.py" -> "simulation_engine.utils.worldstate_io";
    "ui_shell.py" -> "core.variable_registry";
    "ui_shell.py" -> "dev_tools.rule_dev_shell";
    "ui_shell.py" -> "forecast_engine.forecast_log_viewer";
    "ui_shell.py" -> "dev_tools.pulse_test_suite";
    "ui_shell.py" -> "dev_tools.pulse_forecast_test_suite";
    "ui_shell.py" -> "forecast_engine.forecast_batch_runner";
    "ui_shell.py" -> "utils.log_utils";
    "ui_shell.py" -> "core.path_registry";
    "ui_shell.py" -> "core.pulse_config";
    "ui_shell.py" -> "core.variable_registry";
    "ui_shell.py" -> "learning.learning";
    "ui_shell.py" -> "trust_system.trust_engine";
    "ui_shell.py" -> "trust_system.license_enforcer";
    "ui_shell.py" -> "forecast_output.forecast_memory_promoter";
    "aws_batch_submit.py" -> "datetime";
    "aws_batch_submit.py" -> "typing";
    "aws_batch_submit.py" -> "botocore.exceptions";
    "aws_batch_submit_status.py" -> "datetime";
    "aws_batch_submit_status.py" -> "typing";
    "aws_batch_submit_status.py" -> "botocore.exceptions";
    "parallel_trainer.py" -> "functools";
    "parallel_trainer.py" -> "typing";
    "parallel_trainer.py" -> "datetime";
    "parallel_trainer.py" -> "dask.distributed";
    "parallel_trainer.py" -> "recursive_training.data.data_store";
    "parallel_trainer.py" -> "recursive_training.metrics.metrics_store";
    "parallel_trainer.py" -> "recursive_training.metrics.async_metrics_collector";
    "parallel_trainer.py" -> "core.optimized_trust_tracker";
    "parallel_trainer.py" -> "core.trust_update_buffer";
    "parallel_trainer.py" -> "concurrent.futures";
    "parallel_trainer.py" -> "simulation_engine.simulator_core";
    "parallel_trainer.py" -> "recursive_training.data.streaming_data_store";
    "parallel_trainer.py" -> "recursive_training.data.streaming_data_store";
    "parallel_trainer.py" -> "recursive_training.data.streaming_data_store";
    "parallel_trainer.py" -> "recursive_training.data.optimized_data_store";
    "parallel_trainer.py" -> "recursive_training.data.optimized_data_store";
    "run_training.py" -> "datetime";
    "run_training.py" -> "recursive_training.data.s3_data_store";
    "run_training.py" -> "recursive_training.parallel_trainer";
    "run_training.py" -> "dask.distributed";
    "enhanced_metrics.py" -> "datetime";
    "enhanced_metrics.py" -> "typing";
    "enhanced_metrics.py" -> "recursive_training.metrics.training_metrics";
    "enhanced_metrics.py" -> "recursive_training.metrics.metrics_store";
    "enhanced_metrics.py" -> "recursive_training.integration.cost_controller";
    "enhanced_metrics.py" -> "scipy.stats";
    "retrodiction_curriculum.py" -> "typing";
    "retrodiction_curriculum.py" -> "recursive_training.advanced_metrics.enhanced_metrics";
    "retrodiction_curriculum.py" -> "recursive_training.integration.cost_controller";
    "visualization.py" -> "typing";
    "__init__.py" -> "enhanced_metrics";
    "__init__.py" -> "retrodiction_curriculum";
    "__init__.py" -> "visualization";
    "default_config.py" -> "dataclasses";
    "default_config.py" -> "typing";
    "advanced_feature_processor.py" -> "typing";
    "advanced_feature_processor.py" -> "datetime";
    "advanced_feature_processor.py" -> "recursive_training.data.time_frequency_decomposition";
    "advanced_feature_processor.py" -> "recursive_training.data.graph_based_features";
    "advanced_feature_processor.py" -> "recursive_training.data.self_supervised_learning";
    "data_store.py" -> "datetime";
    "data_store.py" -> "pathlib";
    "data_store.py" -> "typing";
    "data_store.py" -> "concurrent.futures";
    "data_store.py" -> "core.pulse_config";
    "data_store.py" -> "datetime";
    "feature_processor.py" -> "collections";
    "feature_processor.py" -> "datetime";
    "feature_processor.py" -> "pathlib";
    "feature_processor.py" -> "typing";
    "feature_processor.py" -> "scipy.signal";
    "feature_processor.py" -> "tensorflow.keras.models";
    "feature_processor.py" -> "tensorflow.keras.layers";
    "feature_processor.py" -> "tensorflow.keras.optimizers";
    "feature_processor_integration.py" -> "typing";
    "feature_processor_integration.py" -> "recursive_training.data.feature_processor";
    "feature_processor_integration.py" -> "recursive_training.data.advanced_feature_processor";
    "graph_based_features.py" -> "typing";
    "graph_based_features.py" -> "datetime";
    "graph_based_features.py" -> "scipy";
    "ingestion_manager.py" -> "datetime";
    "ingestion_manager.py" -> "pathlib";
    "ingestion_manager.py" -> "typing";
    "ingestion_manager.py" -> "pydantic";
    "ingestion_manager.py" -> "recursive_training.data.data_store";
    "ingestion_manager.py" -> "core.pulse_config";
    "ingestion_manager.py" -> "core.bayesian_trust_tracker";
    "ingestion_manager.py" -> "core.schemas";
    "ingestion_manager.py" -> "learning.output_data_reader";
    "ingestion_manager.py" -> "recursive_training.config.default_config";
    "optimized_data_store.py" -> "datetime";
    "optimized_data_store.py" -> "pathlib";
    "optimized_data_store.py" -> "typing";
    "optimized_data_store.py" -> "functools";
    "optimized_data_store.py" -> "concurrent.futures";
    "optimized_data_store.py" -> "recursive_training.data.data_store";
    "s3_data_store.py" -> "datetime";
    "s3_data_store.py" -> "pathlib";
    "s3_data_store.py" -> "typing";
    "s3_data_store.py" -> "functools";
    "s3_data_store.py" -> "concurrent.futures";
    "s3_data_store.py" -> "recursive_training.data.streaming_data_store";
    "s3_data_store.py" -> "botocore.exceptions";
    "self_supervised_learning.py" -> "typing";
    "self_supervised_learning.py" -> "datetime";
    "self_supervised_learning.py" -> "tensorflow.keras.models";
    "self_supervised_learning.py" -> "tensorflow.keras.layers";
    "self_supervised_learning.py" -> "tensorflow.keras.callbacks";
    "self_supervised_learning.py" -> "torch.utils.data";
    "streaming_data_store.py" -> "datetime";
    "streaming_data_store.py" -> "pathlib";
    "streaming_data_store.py" -> "typing";
    "streaming_data_store.py" -> "functools";
    "streaming_data_store.py" -> "concurrent.futures";
    "streaming_data_store.py" -> "recursive_training.data.optimized_data_store";
    "streaming_data_store.py" -> "pandas.io.parsers";
    "time_frequency_decomposition.py" -> "typing";
    "time_frequency_decomposition.py" -> "scipy";
    "time_frequency_decomposition.py" -> "scipy";
    "__init__.py" -> "recursive_training.data.data_store";
    "__init__.py" -> "recursive_training.data.optimized_data_store";
    "__init__.py" -> "recursive_training.data.streaming_data_store";
    "__init__.py" -> "recursive_training.data.s3_data_store";
    "error_handler.py" -> "typing";
    "recovery.py" -> "typing";
    "training_monitor.py" -> "typing";
    "__init__.py" -> "error_handler";
    "__init__.py" -> "training_monitor";
    "__init__.py" -> "recovery";
    "config_manager.py" -> "typing";
    "config_manager.py" -> "pathlib";
    "cost_controller.py" -> "datetime";
    "cost_controller.py" -> "enum";
    "cost_controller.py" -> "typing";
    "cost_controller.py" -> "recursive_training.metrics.metrics_store";
    "process_registry.py" -> "typing";
    "pulse_adapter.py" -> "datetime";
    "pulse_adapter.py" -> "typing";
    "pulse_adapter.py" -> "recursive_training.metrics.metrics_store";
    "pulse_adapter.py" -> "recursive_training.metrics.training_metrics";
    "pulse_adapter.py" -> "core.pulse_config";
    "pulse_adapter.py" -> "core.event_system";
    "pulse_adapter.py" -> "symbolic_system.symbolic_executor";
    "__init__.py" -> "recursive_training.integration.pulse_adapter";
    "__init__.py" -> "recursive_training.integration.cost_controller";
    "async_metrics_collector.py" -> "typing";
    "async_metrics_collector.py" -> "datetime";
    "async_metrics_collector.py" -> "recursive_training.metrics.metrics_store";
    "bayesian_adapter.py" -> "datetime";
    "bayesian_adapter.py" -> "typing";
    "bayesian_adapter.py" -> "typing";
    "bayesian_adapter.py" -> "recursive_training.metrics.metrics_store";
    "bayesian_adapter.py" -> "core.bayesian_trust_tracker";
    "metrics_store.py" -> "datetime";
    "metrics_store.py" -> "pathlib";
    "metrics_store.py" -> "typing";
    "metrics_store.py" -> "collections";
    "metrics_store.py" -> "core.pulse_config";
    "training_metrics.py" -> "datetime";
    "training_metrics.py" -> "typing";
    "training_metrics.py" -> "typing";
    "training_metrics.py" -> "recursive_training.metrics.metrics_store";
    "__init__.py" -> "recursive_training.metrics.metrics_store";
    "__init__.py" -> "recursive_training.metrics.training_metrics";
    "__init__.py" -> "recursive_training.metrics.bayesian_adapter";
    "event_stream_manager.py" -> "datetime";
    "event_stream_manager.py" -> "enum";
    "event_stream_manager.py" -> "typing";
    "integration.py" -> "datetime";
    "integration.py" -> "typing";
    "integration.py" -> "recursive_training.regime_sensor.event_stream_manager";
    "integration.py" -> "recursive_training.regime_sensor.regime_detector";
    "integration.py" -> "recursive_training.regime_sensor.retrodiction_trigger";
    "integration.py" -> "causal_model.counterfactual_simulator";
    "regime_detector.py" -> "datetime";
    "regime_detector.py" -> "typing";
    "regime_detector.py" -> "enum";
    "regime_detector.py" -> "recursive_training.regime_sensor.event_stream_manager";
    "retrodiction_trigger.py" -> "datetime";
    "retrodiction_trigger.py" -> "typing";
    "retrodiction_trigger.py" -> "enum";
    "retrodiction_trigger.py" -> "recursive_training.regime_sensor.regime_detector";
    "retrodiction_trigger.py" -> "recursive_training.regime_sensor.regime_detector";
    "hybrid_adapter.py" -> "datetime";
    "hybrid_adapter.py" -> "typing";
    "hybrid_adapter.py" -> "dataclasses";
    "hybrid_adapter.py" -> "recursive_training.integration.cost_controller";
    "hybrid_adapter.py" -> "recursive_training.config.default_config";
    "rule_evaluator.py" -> "datetime";
    "rule_evaluator.py" -> "typing";
    "rule_evaluator.py" -> "enum";
    "rule_evaluator.py" -> "concurrent.futures";
    "rule_evaluator.py" -> "recursive_training.integration.cost_controller";
    "rule_evaluator.py" -> "recursive_training.metrics.metrics_store";
    "rule_evaluator.py" -> "recursive_training.config.default_config";
    "rule_evaluator.py" -> "multiprocessing";
    "rule_generator.py" -> "datetime";
    "rule_generator.py" -> "typing";
    "rule_generator.py" -> "enum";
    "rule_generator.py" -> "concurrent.futures";
    "rule_generator.py" -> "recursive_training.integration.cost_controller";
    "rule_generator.py" -> "recursive_training.metrics.metrics_store";
    "rule_generator.py" -> "recursive_training.config.default_config";
    "rule_generator.py" -> "multiprocessing";
    "rule_repository.py" -> "datetime";
    "rule_repository.py" -> "typing";
    "rule_repository.py" -> "types";
    "rule_repository.py" -> "enum";
    "rule_repository.py" -> "recursive_training.config.default_config";
    "__init__.py" -> "recursive_training.rules.rule_generator";
    "__init__.py" -> "recursive_training.rules.rule_evaluator";
    "__init__.py" -> "recursive_training.rules.rule_repository";
    "__init__.py" -> "recursive_training.rules.hybrid_adapter";
    "build_symbol_index.py" -> "__future__";
    "build_symbol_index.py" -> "pathlib";
    "build_symbol_index.py" -> "typing";
    "build_symbol_index.py" -> "tqdm";
    "build_symbol_index.py" -> "chromadb.utils.embedding_functions";
    "capture_missing_variables.py" -> "pathlib";
    "capture_missing_variables.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "capture_missing_variables.py" -> "iris.iris_utils.ingestion_persistence";
    "discover_available_variables.py" -> "pathlib";
    "run_causal_benchmarks.py" -> "pathlib";
    "run_causal_benchmarks.py" -> "typing";
    "run_causal_benchmarks.py" -> "core.path_registry";
    "run_causal_benchmarks.py" -> "core.pulse_config";
    "run_causal_benchmarks.py" -> "simulation_engine.batch_runner";
    "run_causal_benchmarks.py" -> "forecast_output.forecast_generator";
    "run_causal_benchmarks.py" -> "learning.forecast_pipeline_runner";
    "analyze_historical_data_quality.py" -> "pathlib";
    "analyze_historical_data_quality.py" -> "typing";
    "benchmark_retrodiction.py" -> "typing";
    "benchmark_retrodiction.py" -> "datetime";
    "benchmark_retrodiction.py" -> "unittest.mock";
    "benchmark_retrodiction.py" -> "recursive_training.parallel_trainer";
    "benchmark_retrodiction.py" -> "recursive_training.data.data_store";
    "benchmark_retrodiction.py" -> "recursive_training.metrics.metrics_store";
    "benchmark_retrodiction.py" -> "recursive_training.advanced_metrics.retrodiction_curriculum";
    "benchmark_retrodiction.py" -> "core.optimized_trust_tracker";
    "benchmark_retrodiction.py" -> "causal_model.optimized_discovery";
    "improve_historical_data.py" -> "pathlib";
    "improve_historical_data.py" -> "typing";
    "improve_historical_data.py" -> "datetime";
    "improve_historical_data.py" -> "iris.iris_plugins_variable_ingestion.historical_ingestion_plugin";
    "runversionone.py" -> "datetime";
    "runversionone.py" -> "typing";
    "runversionone.py" -> "simulation_engine.simulator_core";
    "runversionone.py" -> "simulation_engine.worldstate";
    "runversionone.py" -> "recursive_training.data.data_store";
    "runversionone.py" -> "recursive_training.advanced_metrics.enhanced_metrics";
    "runversionone.py" -> "learning.learning";
    "runversionone.py" -> "recursive_training.parallel_trainer";
    "runversionone.py" -> "core.optimized_trust_tracker";
    "runversionone.py" -> "datetime";
    "api_key_report.py" -> "datetime";
    "batch_runner.py" -> "typing";
    "batch_runner.py" -> "core.path_registry";
    "batch_runner.py" -> "core.pulse_config";
    "batch_runner.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "batch_runner.py" -> "simulation_engine.simulator_core";
    "batch_runner.py" -> "simulation_engine.worldstate";
    "batch_runner.py" -> "forecast_output.forecast_generator";
    "batch_runner.py" -> "learning.forecast_pipeline_runner";
    "batch_runner.py" -> "utils.log_utils";
    "batch_runner.py" -> "diagnostics.shadow_model_monitor";
    "causal_rules.py" -> "simulation_engine.worldstate";
    "causal_rules.py" -> "simulation_engine.state_mutation";
    "causal_rules.py" -> "core.variable_accessor";
    "causal_rules.py" -> "core.pulse_config";
    "causal_rules.py" -> "core.pulse_learning_log";
    "causal_rules.py" -> "core.bayesian_trust_tracker";
    "decay_logic.py" -> "simulation_engine.worldstate";
    "decay_logic.py" -> "typing";
    "decay_logic.py" -> "core.pulse_config";
    "decay_logic.py" -> "core.pulse_config";
    "decay_logic.py" -> "core.pulse_config";
    "historical_retrodiction_runner.py" -> "typing";
    "historical_retrodiction_runner.py" -> "pathlib";
    "pulse_signal_router.py" -> "typing";
    "pulse_signal_router.py" -> "simulation_engine.worldstate";
    "pulse_signal_router.py" -> "simulation_engine.state_mutation";
    "pulse_signal_router.py" -> "simulation_engine.variables.worldstate_variables";
    "pulse_signal_router.py" -> "simulation_engine.worldstate";
    "rule_engine.py" -> "simulation_engine.worldstate";
    "rule_engine.py" -> "simulation_engine.rules.static_rules";
    "rule_engine.py" -> "simulation_engine.rules.rule_audit_layer";
    "rule_engine.py" -> "symbolic_system.symbolic_bias_tracker";
    "rule_mutation_engine.py" -> "typing";
    "rule_mutation_engine.py" -> "core.path_registry";
    "rule_mutation_engine.py" -> "memory.rule_cluster_engine";
    "rule_mutation_engine.py" -> "simulation_engine.rules.rule_registry";
    "rule_mutation_engine.py" -> "core.pulse_learning_log";
    "rule_mutation_engine.py" -> "datetime";
    "simulate_backward.py" -> "typing";
    "simulate_backward.py" -> "datetime";
    "simulate_backward.py" -> "intelligence.worldstate_loader";
    "simulate_backward.py" -> "simulation_engine.worldstate";
    "simulation_drift_detector.py" -> "typing";
    "simulation_drift_detector.py" -> "collections";
    "simulator_core.py" -> "typing";
    "simulator_core.py" -> "simulation_engine.state_mutation";
    "simulator_core.py" -> "simulation_engine.rule_engine";
    "simulator_core.py" -> "trust_system.forecast_episode_logger";
    "simulator_core.py" -> "symbolic_system.symbolic_trace_scorer";
    "simulator_core.py" -> "simulation_engine.utils.simulation_trace_logger";
    "simulator_core.py" -> "simulation_engine.rules.reverse_rule_mapper";
    "simulator_core.py" -> "learning.learning";
    "simulator_core.py" -> "core.pulse_learning_log";
    "simulator_core.py" -> "datetime";
    "simulator_core.py" -> "diagnostics.shadow_model_monitor";
    "simulator_core.py" -> "simulation_engine.worldstate";
    "simulator_core.py" -> "diagnostics.shadow_model_monitor";
    "simulator_core.py" -> "symbolic_system.symbolic_state_tagger";
    "simulator_core.py" -> "trust_system.trust_engine";
    "simulator_core.py" -> "trust_system.trust_engine";
    "simulator_core.py" -> "simulation_engine.rules.reverse_rule_engine";
    "simulator_core.py" -> "trust_system.trust_engine";
    "simulator_core.py" -> "symbolic_system.symbolic_state_tagger";
    "simulator_core.py" -> "worldstate";
    "simulator_core.py" -> "simulation_engine.rules.reverse_rule_engine";
    "simulator_core.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "simulator_core.py" -> "simulation_engine.state_mutation";
    "simulator_core.py" -> "core.bayesian_trust_tracker";
    "simulator_core.py" -> "symbolic_system.gravity.gravity_config";
    "simulator_core.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "simulator_core.py" -> "simulation_engine.worldstate_monitor";
    "simulator_core.py" -> "core.variable_accessor";
    "state_mutation.py" -> "simulation_engine.worldstate";
    "state_mutation.py" -> "typing";
    "state_mutation.py" -> "core.pulse_learning_log";
    "state_mutation.py" -> "datetime";
    "state_mutation.py" -> "symbolic_system.context";
    "state_mutation.py" -> "core.pulse_config";
    "train_rl_agent.py" -> "stable_baselines3";
    "train_rl_agent.py" -> "simulation_engine.rl_env";
    "turn_engine.py" -> "simulation_engine.worldstate";
    "turn_engine.py" -> "simulation_engine.state_mutation";
    "turn_engine.py" -> "simulation_engine.causal_rules";
    "turn_engine.py" -> "simulation_engine.rule_engine";
    "turn_engine.py" -> "typing";
    "turn_engine.py" -> "core.path_registry";
    "turn_engine.py" -> "memory.trace_audit_engine";
    "turn_engine.py" -> "core.pulse_config";
    "turn_engine.py" -> "core.variable_accessor";
    "turn_engine.py" -> "simulation_engine.worldstate";
    "turn_engine.py" -> "simulation_engine.simulator_core";
    "worldstate.py" -> "dataclasses";
    "worldstate.py" -> "datetime";
    "worldstate.py" -> "typing";
    "worldstate_monitor.py" -> "simulation_engine.worldstate";
    "worldstate_monitor.py" -> "utils.log_utils";
    "worldstate_monitor.py" -> "core.variable_accessor";
    "worldstate_monitor.py" -> "core.path_registry";
    "worldstate_monitor.py" -> "typing";
    "worldstate_monitor.py" -> "pathlib";
    "worldstate_monitor.py" -> "diagnostics.gravity_explainer";
    "pulse_rule_expander.py" -> "collections";
    "pulse_rule_expander.py" -> "typing";
    "pulse_rule_expander.py" -> "simulation_engine.rules.rule_matching_utils";
    "pulse_rule_expander.py" -> "simulation_engine.rules.rule_registry";
    "pulse_rule_explainer.py" -> "typing";
    "pulse_rule_explainer.py" -> "simulation_engine.rules.rule_matching_utils";
    "reverse_rule_engine.py" -> "simulation_engine.rules.rule_matching_utils";
    "reverse_rule_engine.py" -> "typing";
    "reverse_rule_engine.py" -> "simulation_engine.rules.rule_fingerprint_expander";
    "reverse_rule_mapper.py" -> "typing";
    "reverse_rule_mapper.py" -> "simulation_engine.rules.rule_matching_utils";
    "rule_audit_layer.py" -> "simulation_engine.worldstate";
    "rule_audit_layer.py" -> "typing";
    "rule_autoevolver.py" -> "typing";
    "rule_autoevolver.py" -> "simulation_engine.rules.rule_registry";
    "rule_autoevolver.py" -> "simulation_engine.rule_mutation_engine";
    "rule_autoevolver.py" -> "simulation_engine.simulation_drift_detector";
    "rule_autoevolver.py" -> "simulation_engine.rules.rule_coherence_checker";
    "rule_autoevolver.py" -> "simulation_engine.rules.pulse_rule_expander";
    "rule_autoevolver.py" -> "simulation_engine.rules.pulse_rule_explainer";
    "rule_autoevolver.py" -> "memory.rule_cluster_engine";
    "rule_coherence_checker.py" -> "typing";
    "rule_coherence_checker.py" -> "pathlib";
    "rule_coherence_checker.py" -> "simulation_engine.rules.rule_matching_utils";
    "rule_fingerprint_expander.py" -> "typing";
    "rule_fingerprint_expander.py" -> "simulation_engine.rules.rule_matching_utils";
    "rule_matching_utils.py" -> "typing";
    "rule_matching_utils.py" -> "simulation_engine.rules.rule_registry";
    "rule_matching_utils.py" -> "simulation_engine.rules.rule_coherence_checker";
    "rule_registry.py" -> "core.path_registry";
    "rule_registry.py" -> "core.pulse_config";
    "rule_registry.py" -> "pathlib";
    "rule_registry.py" -> "simulation_engine.rules.rule_coherence_checker";
    "static_rules.py" -> "core.pulse_config";
    "static_rules.py" -> "core.variable_accessor";
    "static_rules.py" -> "core.path_registry";
    "static_rules.py" -> "pipeline.rule_applier";
    "simulation_command.py" -> "abc";
    "simulation_command.py" -> "typing";
    "simulation_command.py" -> "simulation_engine.state_mutation";
    "simulation_command.py" -> "simulation_engine.rule_engine";
    "simulation_command.py" -> "symbolic_system.symbolic_state_tagger";
    "simulation_runner.py" -> "typing";
    "ingest_to_snapshots.py" -> "simulation_engine.worldstate";
    "ingest_to_snapshots.py" -> "core.variable_accessor";
    "ingest_to_snapshots.py" -> "simulation_engine.utils.worldstate_io";
    "ingest_to_snapshots.py" -> "iris.iris_plugins";
    "ingest_to_snapshots.py" -> "iris.iris_plugins_variable_ingestion";
    "pulse_variable_forecaster.py" -> "statistics";
    "pulse_variable_forecaster.py" -> "typing";
    "pulse_variable_forecaster.py" -> "simulation_engine.turn_engine";
    "pulse_variable_forecaster.py" -> "simulation_engine.worldstate";
    "simulation_replayer.py" -> "typing";
    "simulation_replayer.py" -> "dataclasses";
    "simulation_replayer.py" -> "datetime";
    "simulation_replayer.py" -> "simulation_engine.worldstate";
    "simulation_replayer.py" -> "simulation_engine.turn_engine";
    "simulation_replayer.py" -> "utils.log_utils";
    "simulation_replayer.py" -> "core.path_registry";
    "simulation_replayer.py" -> "core.pulse_learning_log";
    "simulation_trace_logger.py" -> "datetime";
    "simulation_trace_logger.py" -> "datetime";
    "simulation_trace_viewer.py" -> "collections";
    "worldstate_io.py" -> "datetime";
    "worldstate_io.py" -> "typing";
    "worldstate_io.py" -> "simulation_engine.worldstate";
    "worldstate_variables.py" -> "core.variable_registry";
    "config.py" -> "typing";
    "context.py" -> "typing";
    "context.py" -> "core.pulse_config";
    "numeric_transforms.py" -> "typing";
    "numeric_transforms.py" -> "datetime";
    "numeric_transforms.py" -> "simulation_engine.worldstate";
    "numeric_transforms.py" -> "symbolic_system.optimization";
    "numeric_transforms.py" -> "symbolic_system.config";
    "optimization.py" -> "typing";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "optimization.py" -> "core.pulse_config";
    "overlays.py" -> "simulation_engine.worldstate";
    "overlays.py" -> "simulation_engine.state_mutation";
    "overlays.py" -> "typing";
    "overlays.py" -> "core.pulse_config";
    "overlays.py" -> "symbolic_system.optimization";
    "overlays.py" -> "core.pulse_config";
    "overlays.py" -> "core.pulse_config";
    "pulse_symbolic_arc_tracker.py" -> "typing";
    "pulse_symbolic_arc_tracker.py" -> "collections";
    "pulse_symbolic_learning_loop.py" -> "typing";
    "pulse_symbolic_learning_loop.py" -> "collections";
    "pulse_symbolic_revision_planner.py" -> "typing";
    "pulse_symbolic_revision_planner.py" -> "collections";
    "symbolic_alignment_engine.py" -> "typing";
    "symbolic_bias_tracker.py" -> "collections";
    "symbolic_bias_tracker.py" -> "typing";
    "symbolic_bias_tracker.py" -> "core.path_registry";
    "symbolic_contradiction_cluster.py" -> "typing";
    "symbolic_contradiction_cluster.py" -> "collections";
    "symbolic_contradiction_cluster.py" -> "itertools";
    "symbolic_convergence_detector.py" -> "typing";
    "symbolic_convergence_detector.py" -> "collections";
    "symbolic_drift.py" -> "simulation_engine.worldstate";
    "symbolic_drift.py" -> "symbolic_system.symbolic_utils";
    "symbolic_drift.py" -> "typing";
    "symbolic_executor.py" -> "typing";
    "symbolic_flip_classifier.py" -> "typing";
    "symbolic_flip_classifier.py" -> "collections";
    "symbolic_memory.py" -> "datetime";
    "symbolic_memory.py" -> "typing";
    "symbolic_memory.py" -> "utils.log_utils";
    "symbolic_memory.py" -> "core.path_registry";
    "symbolic_state_tagger.py" -> "datetime";
    "symbolic_state_tagger.py" -> "typing";
    "symbolic_state_tagger.py" -> "utils.log_utils";
    "symbolic_state_tagger.py" -> "core.path_registry";
    "symbolic_state_tagger.py" -> "forecast_output.forecast_tags";
    "symbolic_trace_scorer.py" -> "typing";
    "symbolic_trace_scorer.py" -> "datetime";
    "symbolic_transition_graph.py" -> "typing";
    "symbolic_transition_graph.py" -> "collections";
    "symbolic_transition_graph.py" -> "symbolic_system.symbolic_flip_classifier";
    "symbolic_upgrade_planner.py" -> "typing";
    "symbolic_utils.py" -> "simulation_engine.worldstate";
    "symbolic_utils.py" -> "typing";
    "__init__.py" -> "symbolic_system";
    "cli.py" -> "typing";
    "cli.py" -> "symbolic_system.gravity.gravity_config";
    "cli.py" -> "symbolic_system.gravity.integration";
    "gravity_config.py" -> "typing";
    "gravity_fabric.py" -> "typing";
    "gravity_fabric.py" -> "dataclasses";
    "gravity_fabric.py" -> "datetime";
    "gravity_fabric.py" -> "simulation_engine.worldstate";
    "gravity_fabric.py" -> "symbolic_system.gravity.symbolic_pillars";
    "gravity_fabric.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "gravity_fabric.py" -> "symbolic_system.gravity.gravity_config";
    "integration.py" -> "__future__";
    "integration.py" -> "typing";
    "integration.py" -> "simulation_engine.worldstate";
    "integration.py" -> "simulation_engine.state_mutation";
    "integration.py" -> "symbolic_system.gravity.symbolic_pillars";
    "integration.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "integration.py" -> "symbolic_system.gravity.gravity_fabric";
    "integration.py" -> "symbolic_system.gravity.gravity_config";
    "integration_example.py" -> "typing";
    "integration_example.py" -> "simulation_engine.worldstate";
    "integration_example.py" -> "simulation_engine.simulation_executor";
    "integration_example.py" -> "symbolic_system.gravity.gravity_config";
    "integration_example.py" -> "symbolic_system.gravity.integration";
    "overlay_bridge.py" -> "typing";
    "overlay_bridge.py" -> "simulation_engine.worldstate";
    "overlay_bridge.py" -> "symbolic_system.gravity.symbolic_pillars";
    "overlay_bridge.py" -> "symbolic_system.gravity.integration";
    "symbolic_gravity_fabric.py" -> "typing";
    "symbolic_gravity_fabric.py" -> "datetime";
    "symbolic_gravity_fabric.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "symbolic_gravity_fabric.py" -> "symbolic_system.gravity.symbolic_pillars";
    "symbolic_gravity_fabric.py" -> "symbolic_system.gravity.gravity_config";
    "symbolic_gravity_fabric.py" -> "symbolic_system.gravity.gravity_config";
    "symbolic_pillars.py" -> "typing";
    "symbolic_pillars.py" -> "datetime";
    "symbolic_pillars.py" -> "collections";
    "symbolic_pillars.py" -> "symbolic_system.symbolic_utils";
    "symbolic_pillars.py" -> "symbolic_system.gravity.visualization";
    "visualization.py" -> "typing";
    "visualization.py" -> "datetime";
    "visualization.py" -> "matplotlib.patches";
    "visualization.py" -> "symbolic_system.gravity.symbolic_pillars";
    "visualization.py" -> "symbolic_system.gravity.gravity_config";
    "__init__.py" -> "symbolic_system.gravity.gravity_config";
    "__init__.py" -> "symbolic_system.gravity.symbolic_pillars";
    "__init__.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "__init__.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "__init__.py" -> "symbolic_system.gravity.engines";
    "residual_gravity_engine.py" -> "__future__";
    "residual_gravity_engine.py" -> "collections";
    "residual_gravity_engine.py" -> "typing";
    "residual_gravity_engine.py" -> "utils.log_utils";
    "residual_gravity_engine.py" -> "symbolic_system.gravity.symbolic_pillars";
    "residual_gravity_engine.py" -> "symbolic_system.context";
    "residual_gravity_engine.py" -> "symbolic_system.context";
    "conftest.py" -> "unittest.mock";
    "test_ai_forecaster.py" -> "unittest.mock";
    "test_ai_forecaster.py" -> "forecast_engine";
    "test_ai_forecaster.py" -> "core";
    "test_alignment_index.py" -> "trust_system.alignment_index";
    "test_bayesian_trust_tracker.py" -> "core.bayesian_trust_tracker";
    "test_causal_benchmarks.py" -> "unittest.mock";
    "test_causal_benchmarks.py" -> "simulation_engine.batch_runner";
    "test_causal_benchmarks.py" -> "simulation_engine.simulator_core";
    "test_causal_benchmarks.py" -> "scripts.run_causal_benchmarks";
    "test_causal_model.py" -> "causal_model.structural_causal_model";
    "test_causal_model.py" -> "causal_model.discovery";
    "test_causal_model.py" -> "causal_model.counterfactual_engine";
    "test_digest_exporter.py" -> "forecast_output.digest_exporter";
    "test_ensemble_manager.py" -> "forecast_engine.ensemble_manager";
    "test_forecast_drift_monitor.py" -> "forecast_engine";
    "test_forecast_generator.py" -> "unittest.mock";
    "test_forecast_generator.py" -> "forecast_output.forecast_generator";
    "test_forecast_memory.py" -> "memory.forecast_memory";
    "test_forecast_memory.py" -> "core.path_registry";
    "test_forecast_regret_engine.py" -> "forecast_engine";
    "test_forecast_regret_engine.py" -> "typing";
    "test_gpt_caller.py" -> "unittest.mock";
    "test_gpt_caller.py" -> "pipeline.gpt_caller";
    "test_gravity_explainer.py" -> "typing";
    "test_gravity_explainer.py" -> "unittest.mock";
    "test_gravity_explainer.py" -> "typing";
    "test_gravity_explainer.py" -> "simulation_engine.worldstate";
    "test_gravity_explainer.py" -> "simulation_engine.worldstate";
    "test_gravity_explainer.py" -> "simulation_engine.simulator_core";
    "test_gravity_explainer.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "test_gravity_explainer.py" -> "diagnostics.gravity_explainer";
    "test_gravity_explainer.py" -> "simulation_engine.worldstate_monitor";
    "test_gravity_explainer.py" -> "symbolic_system.gravity.gravity_config";
    "test_gravity_explainer.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "test_gravity_explainer.py" -> "unittest.mock";
    "test_gravity_explainer.py" -> "core.variable_accessor";
    "test_gravity_explainer.py" -> "core.variable_accessor";
    "test_gravity_explainer.py" -> "symbolic_system.gravity.gravity_config";
    "test_historical_retrodiction_runner.py" -> "simulation_engine.simulator_core";
    "test_historical_retrodiction_runner.py" -> "core.variable_registry";
    "test_historical_retrodiction_runner.py" -> "simulation_engine.simulator_core";
    "test_historical_retrodiction_runner.py" -> "core.variable_registry";
    "test_historical_retrodiction_runner.py" -> "simulation_engine.worldstate";
    "test_history_tracker.py" -> "learning.history_tracker";
    "test_hyperparameter_tuner.py" -> "forecast_engine.hyperparameter_tuner";
    "test_integration_simulation_forecast.py" -> "simulation_engine.worldstate";
    "test_integration_simulation_forecast.py" -> "simulation_engine.turn_engine";
    "test_integration_simulation_forecast.py" -> "forecast_output.forecast_licenser";
    "test_learning_profile.py" -> "learning.learning_profile";
    "test_nasa_power_plugin.py" -> "unittest.mock";
    "test_nasa_power_plugin.py" -> "iris.iris_plugins_variable_ingestion.nasa_power_plugin";
    "test_openfda_plugin.py" -> "unittest.mock";
    "test_openfda_plugin.py" -> "iris.iris_plugins_variable_ingestion.openfda_plugin";
    "test_path_registry.py" -> "core.path_registry";
    "test_property_based_simulation_engine.py" -> "hypothesis";
    "test_property_based_simulation_engine.py" -> "simulation_engine.worldstate";
    "test_property_based_simulation_engine.py" -> "simulation_engine.worldstate";
    "test_pulse_config.py" -> "unittest.mock";
    "test_pulse_config.py" -> "core.pulse_config";
    "test_pulse_forecast_lineage.py" -> "forecast_output";
    "test_pulse_prompt_logger.py" -> "operator_interface.pulse_prompt_logger";
    "test_pulse_ui_plot.py" -> "dev_tools.pulse_ui_plot";
    "test_recursion_audit.py" -> "learning.recursion_audit";
    "test_reverse_rule_engine.py" -> "simulation_engine.rules.reverse_rule_engine";
    "test_rolling_features.py" -> "learning.transforms.rolling_features";
    "test_rule_adjustment.py" -> "unittest.mock";
    "test_rule_adjustment.py" -> "trust_system.rule_adjustment";
    "test_rule_adjustment.py" -> "simulation_engine.rules.rule_registry";
    "test_rule_adjustment.py" -> "core.variable_registry";
    "test_rule_consistency.py" -> "simulation_engine.rules";
    "test_rule_consistency.py" -> "simulation_engine.rules.rule_registry";
    "test_rule_fingerprint_expander.py" -> "simulation_engine.rules.rule_fingerprint_expander";
    "test_shadow_model_monitor.py" -> "collections";
    "test_shadow_model_monitor.py" -> "diagnostics.shadow_model_monitor";
    "test_simulator_core.py" -> "simulation_engine.simulator_core";
    "test_simulator_core.py" -> "simulation_engine.worldstate";
    "test_simulator_core.py" -> "unittest.mock";
    "test_simulator_core.py" -> "simulation_engine.worldstate";
    "test_skip_retrodiction.py" -> "unittest.mock";
    "test_skip_retrodiction.py" -> "simulation_engine.simulator_core";
    "test_skip_retrodiction.py" -> "simulation_engine.worldstate";
    "test_strategos_digest_builder.py" -> "forecast_output.strategos_digest_builder";
    "test_symbolic_arc_tracker.py" -> "symbolic_system.pulse_symbolic_arc_tracker";
    "test_symbolic_gravity.py" -> "unittest.mock";
    "test_symbolic_gravity.py" -> "datetime";
    "test_symbolic_gravity.py" -> "symbolic_system.gravity.gravity_config";
    "test_symbolic_gravity.py" -> "symbolic_system.gravity.symbolic_pillars";
    "test_symbolic_gravity.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "test_symbolic_gravity.py" -> "symbolic_system.gravity.symbolic_gravity_fabric";
    "test_symbolic_isolation.py" -> "unittest.mock";
    "test_symbolic_isolation.py" -> "simulation_engine.worldstate";
    "test_symbolic_isolation.py" -> "symbolic_system.context";
    "test_symbolic_isolation.py" -> "symbolic_system.overlays";
    "test_symbolic_isolation.py" -> "core.pulse_config";
    "test_symbolic_isolation.py" -> "simulation_engine.state_mutation";
    "test_symbolic_isolation.py" -> "simulation_engine.state_mutation";
    "test_symbolic_isolation.py" -> "simulation_engine.state_mutation";
    "test_symbolic_numeric.py" -> "unittest.mock";
    "test_symbolic_numeric.py" -> "simulation_engine.worldstate";
    "test_symbolic_numeric.py" -> "symbolic_system.numeric_transforms";
    "test_trust_engine_risk.py" -> "trust_system.trust_engine";
    "test_wikidata_plugin.py" -> "unittest.mock";
    "test_wikidata_plugin.py" -> "iris.iris_plugins_variable_ingestion.wikidata_plugin";
    "conftest.py" -> "unittest.mock";
    "test_config_loader.py" -> "pathlib";
    "test_config_loader.py" -> "typing";
    "test_config_loader.py" -> "pulse.config.loader";
    "test_incremental_ingestion.py" -> "datetime";
    "test_incremental_ingestion.py" -> "pathlib";
    "test_incremental_ingestion.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "test_incremental_ingestion.py" -> "iris.iris_plugins_variable_ingestion.nasdaq_plugin";
    "test_incremental_ingestion.py" -> "data.high_frequency_data_store";
    "test_ingestion_changes.py" -> "datetime";
    "test_ingestion_changes.py" -> "core.variable_registry";
    "test_ingestion_changes.py" -> "iris.iris_plugins";
    "test_ingestion_changes.py" -> "iris.iris_plugins_variable_ingestion.manual_opec_plugin";
    "test_ingestion_changes.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "test_ingestion_changes.py" -> "iris.iris_plugins_variable_ingestion.nasdaq_plugin";
    "test_ingestion_changes.py" -> "iris.iris_plugins_variable_ingestion.high_frequency_indicator_plugin";
    "test_ingestion_changes.py" -> "data.high_frequency_data_access";
    "test_ingestion_changes.py" -> "data.high_frequency_data_store";
    "test_ingestion_changes.py" -> "iris.high_frequency_indicators";
    "test_ingestion_changes.py" -> "iris.iris_plugins_variable_ingestion.alpha_vantage_plugin";
    "conftest.py" -> "unittest.mock";
    "test_nasdaq_plugin.py" -> "datetime";
    "test_nasdaq_plugin.py" -> "iris.iris_plugins_variable_ingestion.nasdaq_plugin";
    "test_advanced_feature_processor.py" -> "unittest.mock";
    "test_advanced_feature_processor.py" -> "recursive_training.data.advanced_feature_processor";
    "test_async_metrics_collector.py" -> "unittest.mock";
    "test_async_metrics_collector.py" -> "recursive_training.metrics.async_metrics_collector";
    "test_async_metrics_collector.py" -> "recursive_training.metrics.metrics_store";
    "test_data_ingestion.py" -> "unittest.mock";
    "test_data_ingestion.py" -> "datetime";
    "test_data_ingestion.py" -> "pathlib";
    "test_data_ingestion.py" -> "recursive_training.data.ingestion_manager";
    "test_data_store.py" -> "unittest.mock";
    "test_data_store.py" -> "datetime";
    "test_data_store.py" -> "pathlib";
    "test_data_store.py" -> "recursive_training.data.data_store";
    "test_feature_processor.py" -> "unittest.mock";
    "test_feature_processor.py" -> "datetime";
    "test_feature_processor.py" -> "collections";
    "test_feature_processor.py" -> "recursive_training.data.feature_processor";
    "test_feature_processor_integration.py" -> "unittest.mock";
    "test_feature_processor_integration.py" -> "recursive_training.data.feature_processor";
    "test_feature_processor_integration.py" -> "recursive_training.data.feature_processor_integration";
    "test_feature_processor_integration.py" -> "recursive_training.data.advanced_feature_processor";
    "test_metrics_store.py" -> "unittest.mock";
    "test_metrics_store.py" -> "datetime";
    "test_metrics_store.py" -> "pathlib";
    "test_metrics_store.py" -> "recursive_training.metrics.metrics_store";
    "test_optimized_data_store.py" -> "datetime";
    "test_optimized_data_store.py" -> "unittest.mock";
    "test_optimized_data_store.py" -> "recursive_training.data.optimized_data_store";
    "test_s3_data_store.py" -> "datetime";
    "test_s3_data_store.py" -> "pathlib";
    "test_s3_data_store.py" -> "unittest.mock";
    "test_s3_data_store.py" -> "recursive_training.data.s3_data_store";
    "test_streaming_data_store.py" -> "pathlib";
    "test_streaming_data_store.py" -> "unittest.mock";
    "test_streaming_data_store.py" -> "recursive_training.data.streaming_data_store";
    "test_streaming_data_store.py" -> "recursive_training.data.optimized_data_store";
    "test_training_metrics.py" -> "unittest.mock";
    "test_training_metrics.py" -> "datetime";
    "test_training_metrics.py" -> "recursive_training.metrics.training_metrics";
    "test_trust_update_buffer.py" -> "unittest.mock";
    "test_trust_update_buffer.py" -> "core.trust_update_buffer";
    "test_trust_update_buffer.py" -> "core.optimized_trust_tracker";
    "test_enhanced_metrics.py" -> "unittest.mock";
    "test_enhanced_metrics.py" -> "recursive_training.advanced_metrics.enhanced_metrics";
    "test_retrodiction_curriculum.py" -> "unittest.mock";
    "test_retrodiction_curriculum.py" -> "recursive_training.advanced_metrics.retrodiction_curriculum";
    "test_visualization.py" -> "unittest.mock";
    "test_visualization.py" -> "recursive_training.advanced_metrics.visualization";
    "test_error_handler.py" -> "unittest.mock";
    "test_error_handler.py" -> "recursive_training.error_handling.error_handler";
    "test_recovery.py" -> "unittest.mock";
    "test_recovery.py" -> "recursive_training.error_handling.recovery";
    "test_training_monitor.py" -> "unittest.mock";
    "test_training_monitor.py" -> "recursive_training.error_handling.training_monitor";
    "conftest.py" -> "unittest.mock";
    "conftest.py" -> "types";
    "test_hybrid_adapter.py" -> "datetime";
    "test_hybrid_adapter.py" -> "unittest.mock";
    "test_hybrid_adapter.py" -> "dataclasses";
    "test_hybrid_adapter.py" -> "typing";
    "test_hybrid_adapter.py" -> "recursive_training.rules.hybrid_adapter";
    "test_hybrid_adapter.py" -> "types";
    "test_rule_evaluator.py" -> "datetime";
    "test_rule_evaluator.py" -> "unittest.mock";
    "test_rule_evaluator.py" -> "recursive_training.rules.rule_evaluator";
    "test_rule_evaluator.py" -> "types";
    "test_rule_generator.py" -> "datetime";
    "test_rule_generator.py" -> "unittest.mock";
    "test_rule_generator.py" -> "recursive_training.rules.rule_generator";
    "test_rule_generator.py" -> "types";
    "test_rule_repository.py" -> "datetime";
    "test_rule_repository.py" -> "unittest.mock";
    "test_rule_repository.py" -> "recursive_training.rules.rule_repository";
    "test_rule_repository.py" -> "types";
    "test_retriever.py" -> "pathlib";
    "test_retriever.py" -> "iris.iris_utils.historical_data_retriever";
    "test_residual_gravity_engine.py" -> "symbolic_system.gravity.engines.residual_gravity_engine";
    "alignment_index.py" -> "typing";
    "alignment_index.py" -> "learning.learning";
    "forecast_audit_trail.py" -> "datetime";
    "forecast_audit_trail.py" -> "typing";
    "forecast_audit_trail.py" -> "trust_system.alignment_index";
    "forecast_audit_trail.py" -> "trust_system.license_enforcer";
    "forecast_audit_trail.py" -> "learning.learning";
    "forecast_episode_logger.py" -> "datetime";
    "forecast_episode_logger.py" -> "typing";
    "forecast_episode_logger.py" -> "collections";
    "forecast_licensing_shell.py" -> "typing";
    "forecast_memory_evolver.py" -> "typing";
    "fragility_detector.py" -> "symbolic_system.symbolic_utils";
    "fragility_detector.py" -> "typing";
    "fragility_detector.py" -> "utils.log_utils";
    "fragility_detector.py" -> "core.pulse_config";
    "license_enforcer.py" -> "typing";
    "license_enforcer.py" -> "trust_system.license_explainer";
    "license_enforcer.py" -> "trust_system.forecast_licensing_shell";
    "license_enforcer.py" -> "trust_system.forecast_audit_trail";
    "license_enforcer.py" -> "typing";
    "license_enforcer.py" -> "trust_system.trust_engine";
    "license_explainer.py" -> "typing";
    "pulse_lineage_tracker.py" -> "typing";
    "pulse_lineage_tracker.py" -> "collections";
    "pulse_regret_chain.py" -> "typing";
    "recovered_forecast_scorer.py" -> "typing";
    "recovered_forecast_scorer.py" -> "trust_system.license_enforcer";
    "retrodiction_engine.py" -> "typing";
    "retrodiction_engine.py" -> "memory.forecast_memory";
    "retrodiction_engine.py" -> "utils.log_utils";
    "retrodiction_engine.py" -> "core.path_registry";
    "retrodiction_engine.py" -> "pathlib";
    "retrodiction_engine.py" -> "simulation_engine.worldstate";
    "retrodiction_engine.py" -> "simulation_engine.simulator_core";
    "retrodiction_engine.py" -> "forecast_output.pfpa_logger";
    "rule_adjustment.py" -> "core.pulse_learning_log";
    "rule_adjustment.py" -> "simulation_engine.rules.rule_registry";
    "rule_adjustment.py" -> "core.variable_registry";
    "test_forecast_retrospector.py" -> "learning.learning";
    "test_trust_engine.py" -> "trust_system.trust_engine";
    "trust_engine.py" -> "typing";
    "trust_engine.py" -> "collections";
    "trust_engine.py" -> "symbolic_system.symbolic_utils";
    "trust_engine.py" -> "core.pulse_config";
    "trust_engine.py" -> "trust_system.retrodiction_engine";
    "trust_engine.py" -> "simulation_engine.worldstate";
    "trust_engine.py" -> "trust_system.services.trust_enrichment_service";
    "trust_engine.py" -> "trust_system.services.trust_scoring_strategy";
    "trust_engine.py" -> "trust_system.retrodiction_engine";
    "trust_engine.py" -> "simulation_engine.worldstate";
    "trust_engine.py" -> "trust_system.fragility_detector";
    "trust_engine.py" -> "trust_system.alignment_index";
    "trust_update.py" -> "forecast_output.pfpa_logger";
    "trust_update.py" -> "memory.forecast_memory";
    "trust_update.py" -> "typing";
    "upgrade_gatekeeper.py" -> "typing";
    "trust_enrichment_service.py" -> "typing";
    "trust_enrichment_service.py" -> "trust_system.trust_engine";
    "trust_scoring_strategy.py" -> "abc";
    "trust_scoring_strategy.py" -> "typing";
    "trust_scoring_strategy.py" -> "trust_system.trust_engine";
    "trust_scoring_strategy.py" -> "core.pulse_config";
    "trust_scoring_strategy.py" -> "symbolic_system.symbolic_utils";
    "file_utils.py" -> "typing";
    "log_utils.py" -> "logging.handlers";
    "log_utils.py" -> "core.path_registry";
    "performance_utils.py" -> "functools";
    "performance_utils.py" -> "utils.log_utils";
    "performance_utils.py" -> "contextlib";
    "__init__.py" -> "context7_client";
    "trust_metrics_visualizer.py" -> "typing";
    "trust_metrics_visualizer.py" -> "core.bayesian_trust_tracker";
    "trust_metrics_visualizer.py" -> "core.pulse_learning_log";
}
