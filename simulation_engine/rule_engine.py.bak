"""
rule_engine.py

Executes a list of static causal rules each simulation turn. Rules mutate the
WorldState, and their activations are logged for downstream use in audit,
forecast scoring, and symbolic diagnostics.

Author: Pulse v0.10
"""

from simulation_engine.worldstate import WorldState

# Sample rule definitions (these would be loaded dynamically in future)
RULES = [
    {
        "id": "R001_EnergySpike",
        "condition": lambda state: state.get_variable("energy_price_index") > 0.7,
        "effects": lambda state: state.update_variable("inflation_index", state.get_variable("inflation_index") + 0.01),
        "symbolic_tags": ["fear", "despair"]
    },
    {
        "id": "R002_TrustRebound",
        "condition": lambda state: state.get_variable("public_trust_level") > 0.65,
        "effects": lambda state: state.update_variable("ai_policy_risk", max(0, state.get_variable("ai_policy_risk") - 0.02)),
        "symbolic_tags": ["hope", "stability"]
    }
]


def run_rules(state: WorldState) -> list[dict]:
    """
    Evaluates all causal rules and applies their effects to the worldstate.

    Returns:
        List of dicts summarizing each activated rule:
        [
            {
                "rule_id": "R001_EnergySpike",
                "symbolic_tags": ["fear", "despair"],
                "timestamp": state.turn
            },
            ...
        ]
    """
    execution_log = []

    for rule in RULES:
        try:
            if rule["condition"](state):
                rule["effects"](state)
                execution_log.append({
                    "rule_id": rule["id"],
                    "symbolic_tags": rule.get("symbolic_tags", []),
                    "timestamp": state.turn
                })
                state.log_event(f"Rule triggered: {rule['id']} â†’ tags={rule.get('symbolic_tags')}")
        except Exception as e:
            state.log_event(f"[RULE ERROR] {rule['id']}: {e}")

    return execution_log
