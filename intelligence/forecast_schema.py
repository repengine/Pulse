"""
Pydantic schema for validating forecast data structures.

Defines the expected structure and types for forecast dictionaries
generated by the Pulse system, including outputs from the simulation,
GPT processing, and associated metadata like rules and trust scores.
"""

from pydantic import BaseModel, Field
from pydantic import ConfigDict
from typing import Any, Dict, List, Union

class ForecastSchema(BaseModel):
    """
    Schema definition for the forecast dictionary.

    Attributes:
        pulse_output: Output from the pulse system. Can be any type.
        gpt_struct: Structure related to GPT processing. Can be any type.
        gpt_output: Raw output string from GPT.
        pulse_domains: List of pulse domains involved. Expected to be a list of strings.
        pulse_rules: List of pulse rules applied. Expected to be a list of strings or rule objects.
        symbolic_tag: Symbolic tag associated with the forecast.
        capital_outcome: Outcome related to capital. Can be any type.
        rule_trace: Trace of rules used. Expected to be a list.
        trust: Trust score or value. Expected to be a float.
    """
    pulse_output: Any = Field(..., description="Output from the pulse system.")
    gpt_struct: Any = Field(..., description="Structure related to GPT processing.")
    gpt_output: str = Field(..., description="Raw output string from GPT.")
    pulse_domains: List[str] = Field(..., description="List of pulse domains involved.")
    pulse_rules: List[Union[str, Dict[str, Any]]] = Field(..., description="List of pulse rules applied.") # Assuming rules can be strings or dicts
    symbolic_tag: str = Field(..., description="Symbolic tag associated with the forecast.")
    capital_outcome: Any = Field(..., description="Outcome related to capital.")
    rule_trace: List[Any] = Field(..., description="Trace of rules used.") # More specific type if known
    trust: float = Field(..., description="Trust score or value.")

    model_config = ConfigDict(
        # Allow extra fields for flexibility, but log a warning if they exist
        # Alternatively, use forbid=True to strictly enforce the schema
        extra="forbid"
    )